{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[273],{813:function(e,t,r){\"use strict\";r.r(t);var a=r(12),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[r(\"h3\",{attrs:{id:\"名词解释\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#名词解释\"}},[e._v(\"#\")]),e._v(\" 名词解释\")]),e._v(\" \"),r(\"p\",[e._v(\"在介绍 \"),r(\"code\",[e._v(\"Fiber\")]),e._v(\" 之前, 需要对官网中出现的以下名词有个深刻的认知。\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[r(\"code\",[e._v(\"Reconciliation\")]),e._v(\": 调和算法, 得出 \"),r(\"code\",[e._v(\"Virtual Dom(针对 Web)\")]),e._v(\" 之间的差异;\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"Scheduling\")]),e._v(\": 调度。\"),r(\"code\",[e._v(\"Recct\")]),e._v(\" 通过内部的调度来安排不同优先级的任务在\"),r(\"code\",[e._v(\"最佳时刻\")]),e._v(\"执行(在 Reconciler 中调用);\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"Render\")]),e._v(\": 将 \"),r(\"code\",[e._v(\"Reconciliation\")]),e._v(\" 的结果刷新到界面上;\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"Fiber\")]),e._v(\": 链表数据结构的 \"),r(\"code\",[e._v(\"React\")]),e._v(\" 实现(个人理解)。\")])]),e._v(\" \"),r(\"blockquote\",[r(\"p\",[e._v(\"平常大家说的 'Fiber' 其实是由上面这些名词组成的架构, Fiber 真正意义上只是一个链表数据结构的 React 实现版本。\")])]),e._v(\" \"),r(\"blockquote\",[r(\"p\",[e._v(\"在 Fiber 的数据结构下有助于实现 concurrent 以及 error boundary, 你觉得如何实现？\")])]),e._v(\" \"),r(\"ul\",[r(\"li\",[e._v(\"并发这个考虑 \"),r(\"code\",[e._v(\"Promise.all\")]),e._v(\"?\")]),e._v(\" \"),r(\"li\",[e._v(\"可以通过链表锁定到具体的报错，让相应的 \"),r(\"code\",[e._v(\"error boundary\")]),e._v(\" 展现\")])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"fiber\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fiber\"}},[e._v(\"#\")]),e._v(\" Fiber\")]),e._v(\" \"),r(\"p\",[e._v(\"fiber 架构是一个增量渲染。\")]),e._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[e._v(\"current \"),r(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[e._v(\"tree\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=>\")]),e._v(\" workInProgress \"),r(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[e._v(\"tree\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=>\")]),e._v(\" current tree\\n\")])])]),r(\"p\",[e._v(\"workInProgress tree: fiber node + other node(由 virtual dom 创建)，\")]),e._v(\" \"),r(\"p\",[e._v(\"fiber 里包含了创造节点后的\"),r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"work\"),r(\"OutboundLink\")],1),e._v(\", 比如对于组件的生命周期、对于 html 组件的增加、改、删除都属于副作用。\")]),e._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74/packages/react-reconciler/src/ReactFiberRoot.js#L31\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"fiber 的根节点\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"h3\",{attrs:{id:\"fiber-constructor\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fiber-constructor\"}},[e._v(\"#\")]),e._v(\" Fiber Constructor\")]),e._v(\" \"),r(\"p\",[e._v(\"如下是 \"),r(\"code\",[e._v(\"Fiber\")]),e._v(\" 的属性, Fiber 完整属性可参考\"),r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/6e4f7c788603dac7fccd227a4852c110b072fe16/packages/react-reconciler/src/ReactFiber.js#L78\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"这里\"),r(\"OutboundLink\")],1),e._v(\"，各个属性的作用是什么呢?\")]),e._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),e._v(\"\\n  stateNode\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"new\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[e._v(\"ClickCounter\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\"\\n  type\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" ClickCounter\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 组件的类型\")]),e._v(\"\\n  alternate\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"null\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\"\\n  key\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"null\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\"\\n  updateQueue\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"null\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\"\\n  memoizedState\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),e._v(\"count\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"0\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\"\\n  pendingProps\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 已经更新的 dom 但还未展示到页面上\")]),e._v(\"\\n  memoizedProps\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// show last rendering\")]),e._v(\"\\n  tag\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"1\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// Fiber 的类型\")]),e._v(\"\\n  effectTag\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"0\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\"\\n  nextEffect\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\":\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"null\")]),e._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),e._v(\"\\n\")])])]),r(\"p\",[e._v(\"下面是对 \"),r(\"code\",[e._v(\"fiber\")]),e._v(\" 对象中各属性的解释。\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[r(\"code\",[e._v(\"type\")]),e._v(\": 组件的类型\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"key\")]),e._v(\": 根据 \"),r(\"code\",[e._v(\"key\")]),e._v(\" 字段判断该 \"),r(\"code\",[e._v(\"fiber\")]),e._v(\" 对象是否可以复用\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"child\")]),e._v(\": 子链表的引用\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"sibling\")]),e._v(\": 相邻链表的引用\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"return\")]),e._v(\": 父链表的引用\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"pendingProps\")]),e._v(\": 和 \"),r(\"code\",[e._v(\"memoizedProps\")]),e._v(\" 一起使用, 若 \"),r(\"code\",[e._v(\"pendingProps\")]),e._v(\" 与 \"),r(\"code\",[e._v(\"memoizedProps\")]),e._v(\" 相等, 则可以复用上一个 fiber 相关的输出\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"memoizedProps\")])]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"pendingWorkPriority\")]),e._v(\": 代表优先级的数字。数字越大，优先级越低(例外 0 —— no work)。这个字段是否更改，待确认\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"alternate\")]),e._v(\": 指向其对应的 \"),r(\"code\",[e._v(\"workInProgress fiber\")])]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"effectTag\")]),e._v(\": 副作用类型, 这个 effect 作用于 \"),r(\"code\",[e._v(\"commit\")]),e._v(\" 阶段(总共有 render、commit 阶段)\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"nextEffect\")]),e._v(\": 下一个副作用\")]),e._v(\" \"),r(\"li\",[r(\"code\",[e._v(\"output\")]),e._v(\": 输出值\")])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"render-phase\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#render-phase\"}},[e._v(\"#\")]),e._v(\" Render phase\")]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"HostRoot\")]),e._v(\" 上使用 \"),r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"renderRoot\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"ul\",[r(\"li\",[r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"performUnitOfWork\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"beginWork\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"completeUnitOfWork\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"completeWork\"),r(\"OutboundLink\")],1)])]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"performUnitOfWork、completeUnitOfWork\")]),e._v(\" 完成遍历，主要工作发生在 \"),r(\"code\",[e._v(\"beginWork、completeWork\")]),e._v(\" 中。\")]),e._v(\" \"),r(\"h3\",{attrs:{id:\"commit-phase\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#commit-phase\"}},[e._v(\"#\")]),e._v(\" Commit phase\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L2306\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"completeRoot\"),r(\"OutboundLink\")],1),e._v(\": 起始于这个方法\")]),e._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"commitRoot\"),r(\"OutboundLink\")],1),e._v(\": Commit phase 阶段主要执行的方法, 更新 dom 以及调用 commit 阶段执行的生命周期方法。\")])]),e._v(\" \"),r(\"blockquote\",[r(\"p\",[e._v(\"找 finishedWork 可以这样找: fiber root -current property-> current tree -> host fiber -alternate-> workInProgress(finshedWork) tree\")])]),e._v(\" \"),r(\"p\",[e._v(\"commitRoot 的简单概要如下:\")]),e._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"function\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"commitRoot\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),r(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[e._v(\"root\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\" finishedWork\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),e._v(\"\\n  \"),r(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"commitBeforeMutationLifecycles\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// getSnapShotBeforeUpdate\")]),e._v(\"\\n  \"),r(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"commitAllHostEffects\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"          \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// operate dom, componentWillUnmount\")]),e._v(\"\\n  root\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\".\")]),e._v(\"current \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=\")]),e._v(\" finishedWork\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"     \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 将 finishedWork tree 置为 current tree\")]),e._v(\"\\n  \"),r(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"commitAllLifeCycles\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"           \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// remaining lifecycles\")]),e._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),e._v(\"\\n\")])])]),r(\"ul\",[r(\"li\",[e._v(\"提问: 为什么称呼从 \"),r(\"code\",[e._v(\"diff\")]),e._v(\" 转为 \"),r(\"code\",[e._v(\"reconciliation\")])])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"fiber-的三个阶段\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fiber-的三个阶段\"}},[e._v(\"#\")]),e._v(\" Fiber 的三个阶段\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[e._v(\"开始阶段: \"),r(\"a\",{attrs:{href:\"https://github.com/MuYunyun/react/blob/master/packages/react-reconciler/src/ReactFiberBeginWork.js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"ReactFiberBeginWork\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"li\",[e._v(\"完成阶段: \"),r(\"a\",{attrs:{href:\"https://github.com/MuYunyun/react/blob/master/packages/react-reconciler/src/ReactFiberCompleteWork.js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"ReactFiberCompleteWork\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"li\",[e._v(\"提交阶段: \"),r(\"a\",{attrs:{href:\"https://github.com/MuYunyun/react/blob/master/packages/react-reconciler/src/ReactFiberCommitWork.js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"ReactFiberCommitWork\"),r(\"OutboundLink\")],1)])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"资料推荐\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#资料推荐\"}},[e._v(\"#\")]),e._v(\" 资料推荐\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[r(\"a\",{attrs:{href:\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Inside Fiber: in-depth overview of the new reconciliation algorithm in React\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://github.com/acdlite/react-fiber-architecture\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"react-fiber-architecture\"),r(\"OutboundLink\")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}