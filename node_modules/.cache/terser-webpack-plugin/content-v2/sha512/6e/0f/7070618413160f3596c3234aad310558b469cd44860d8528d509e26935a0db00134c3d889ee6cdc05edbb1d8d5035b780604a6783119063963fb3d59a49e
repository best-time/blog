{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{667:function(t,n,e){\"use strict\";e.r(n);var a=e(12),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h2\",{attrs:{id:\"函数式组件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数式组件\"}},[t._v(\"#\")]),t._v(\" 函数式组件\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('无状态\\n无法实例化\\n内部没有任何生命周期处理函数\\n轻量,渲染性能高,适合只依赖于外部数据传递而变化的组件(展示组件，无逻辑和状态修改)\\n在template标签里标明functional\\n只接受props值\\n不需要script标签\\n\\n<template functional>\\n      <div>\\n            <p v-for=\"(item,index) in props.items\" :key=\"index\" @click=\"props.itemClick(item)\" />\\n      </div>\\n</template>\\n')])])]),e(\"h2\",{attrs:{id:\"css-深层选择器\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#css-深层选择器\"}},[t._v(\"#\")]),t._v(\" css 深层选择器\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\">>> /deep/ ::v-deep\\n\")])])]),e(\"h2\",{attrs:{id:\"路由器参数解耦\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#路由器参数解耦\"}},[t._v(\"#\")]),t._v(\" 路由器参数解耦\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"正确的解决方案是向路由器添加props。\\nconst router = new VueRouter({\\n  routes: [{\\n    path: '/:id',\\n    component: Component,\\n    props: true\\n  }]\\n})\\n\\n这样，组件可以直接从props获取 params。\\nexport default {\\n  props: ['id'],\\n  methods: {\\n    getParamsId() {\\n      return this.id\\n    }\\n  }\\n}\\n\\n此外，你还可以传入函数以返回自定义 props。\\nconst router = new VueRouter({\\n  routes: [{\\n    path: '/:id',\\n    component: Component,\\n    props: router => ({ id: route.query.id })\\n  }]\\n})\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"hook\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hook\"}},[t._v(\"#\")]),t._v(\" hook\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"export default {\\n  mounted () {\\n    let timer = null\\n    timer = setInterval(() => {\\n      console.log(Date.now())\\n    }, 1000)\\n    this.$once('hook:beforeDestroy', () => {\\n      clearInterval(timer)\\n    })\\n  }\\n}\\n\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"以变成方式挂载组件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#以变成方式挂载组件\"}},[t._v(\"#\")]),t._v(\" 以变成方式挂载组件\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"import Vue from 'vue'\\nimport Popup from './popup'\\n\\nconst PopupCtor = Vue.extend(Popup)\\n\\nconst PopupIns = new PopupCtr()\\n\\nPopupIns.$mount()\\n\\ndocument.body.append(PopupIns.$el)\\n\\nVue.prototype.$popup = Vue.$popup = function () {\\n  PopupIns.open()\\n}\\n\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"所有props传到子组件很容易\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#所有props传到子组件很容易\"}},[t._v(\"#\")]),t._v(\" 所有Props传到子组件很容易\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<template>\\n  <childComponent v-bind=\"$props\" />\\n</template>\\n\\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);","extractedComments":[]}