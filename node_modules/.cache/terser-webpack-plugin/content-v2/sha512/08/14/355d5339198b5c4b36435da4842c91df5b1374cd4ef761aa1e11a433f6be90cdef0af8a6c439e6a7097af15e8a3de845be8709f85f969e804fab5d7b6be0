{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{560:function(a,t,s){\"use strict\";s.r(t);var e=s(12),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"正则表达式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#正则表达式\"}},[a._v(\"#\")]),a._v(\" 正则表达式\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"正则表达式是匹配模式-要么匹配字符-要么匹配位置\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#正则表达式是匹配模式-要么匹配字符-要么匹配位置\"}},[a._v(\"#\")]),a._v(\" 正则表达式是匹配模式，要么匹配字符，要么匹配位置\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"b\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#b\"}},[a._v(\"#\")]),a._v(\" \\\\b\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"\\n\\\\w\\t匹配一个单字字符（字母、数字或者下划线），等价于“[A-Za-z0-9_]”。例如“/\\\\w/”能够匹配“apple,”中的“a”，“$5.28,”中的“5”和“3D.”中的“3”。\\n\\\\W\\t匹配一个非单字字符，等价于“[^A-Za-z0-9_]”。例如“/\\\\W/”或者“/[^A-Za-z0-9_]/”能够匹配“50%.”中的“%”。\\n\\n单词的边界，具体讲有三点规则。\\n\\n① \\\\w和\\\\W之间的位置\\n\\n② ^与\\\\w之间的位置\\n\\n③ \\\\w与$之间的位置\\n\")])])]),s(\"h2\",{attrs:{id:\"b-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#b-2\"}},[a._v(\"#\")]),a._v(\" \\\\B\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"非单词的边界，也就是\\\\b反着来的意思，它的规则如下：\\n\\n① \\\\w与\\\\w之间的位置\\n\\n② \\\\W与\\\\W之间的位置\\n\\n③^与\\\\W之间的位置\\n\\n④\\\\W与$之间的位置\\n\")])])]),s(\"h2\",{attrs:{id:\"p\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#p\"}},[a._v(\"#\")]),a._v(\" (?=p)\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"正向先行断言\\n\\n\\n'xxx_love_study_1.mp4'.replace('xxx', '❤️') // ❤️_love_study_1.mp4\\n\\n\\n\\n'xxx_love_study_1.mp4'.replace(/(?=xxx)/g, '❤️') // ❤️xxx_love_study_1.mp4\\n\\n\\n\\n\")])])]),s(\"h2\",{attrs:{id:\"p-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#p-2\"}},[a._v(\"#\")]),a._v(\" (?!p)\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"负向先行断言\\n\\n\\n'xxx_love_study_1.mp4'.replace(/(?!xxx)/g, '❤️')\\n\\n// (?=xxx)的输出\\n❤️xxx_love_study_1.mp4\\n// (?!xxx)的输出\\nx❤️x❤️x❤️_❤️l❤️o❤️v❤️e❤️_❤️s❤️t❤️u❤️d❤️y❤️_❤️1❤️.❤️m❤️p❤️4❤️\\n\\n除了(?=xxx)匹配到最前面那个位置，其他位置都是(?!xxx)匹配到\\n\\n\")])])]),s(\"h2\",{attrs:{id:\"p-3\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#p-3\"}},[a._v(\"#\")]),a._v(\" (?<=p)\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"符合p子模式后面(注意(?=p)表示的是前面)的那个位置。换句话说是，有一个位置，其前面的部分需要满足p子模式。\\n\\n'xxx_love_study_1.mp4'.replace(/(?<=xxx)/g, '❤️') //xxx❤️_love_study_1.mp4\\n\\n\\n\\n\")])])]),s(\"h2\",{attrs:{id:\"p-4\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#p-4\"}},[a._v(\"#\")]),a._v(\" (?<!p)\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"(?<=p)反过来的意思，可以理解为(?<=p)匹配到的位置之外的位置都是属于(?<!p)的，\\n\\n\\n'xxx_love_study_1.mp4'.replace(/(?<!xxx)/g, '❤️')\\n\\n// (?<=xxx)的输出\\nxxx❤️_love_study_1.mp4\\n// (?<!xxx)的输出\\n❤️x❤️x❤️x_❤️l❤️o❤️v❤️e❤️_❤️s❤️t❤️u❤️d❤️y❤️_❤️1❤️.❤️m❤️p❤️4❤️\\n\\n\\n\\n\")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}