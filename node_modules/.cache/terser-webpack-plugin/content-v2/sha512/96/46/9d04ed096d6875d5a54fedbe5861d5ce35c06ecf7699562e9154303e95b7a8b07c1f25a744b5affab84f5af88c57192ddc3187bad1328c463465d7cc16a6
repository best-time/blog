{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{562:function(n,e,t){\"use strict\";t.r(e);var r=t(12),a=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[t(\"h2\",{attrs:{id:\"正则\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#正则\"}},[n._v(\"#\")]),n._v(\" 正则\")]),n._v(\" \"),t(\"p\",[n._v(\"字面量方式、实例创建的方式\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('//->实例创建第一参数值是字符串\\n//->想要和字面量方式保持统一的话,对于\\\\d \\\\w \\\\n...这些都需要多加一个\\\\,\\n使其\\\\d具有自己的特殊的意义\\n\\nvar reg = /^\\\\d+$/ig;\\nconsole.log(reg.test(\"2016\"));//->true\\nreg = new RegExp(\"^\\\\d+$\", \"ig\");\\nconsole.log(reg.test(\"2016\"));//->false\\nreg = new RegExp(\"^\\\\\\\\d+$\", \"ig\");\\nconsole.log(reg.test(\"2016\"));//->true\\n\\n')])])]),t(\"h2\",{attrs:{id:\"gim\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gim\"}},[n._v(\"#\")]),n._v(\" gim\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"g(global)->全局匹配\\ni(ignoreCase)->忽略大小写匹配\\nm(multiline)->换行匹配\\n\")])])]),t(\"h2\",{attrs:{id:\"reg\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reg\"}},[n._v(\"#\")]),n._v(\" reg\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"元字符: ^ $ . * + ? | \\\\ / ( ) [ ] { } = ! : - ,\\n\\n\\\\d -> 匹配一个0-9的数字,相当于[0-9]\\n\\\\D ->匹配一个除了0-9的任意字符\\n\\\\w -> 匹配一个0-9、a-z、A-Z、_的数字或字符,相当于[0-9a-zA-Z_]\\n\\\\W是[^0-9a-zA-Z_]。非单词字符。\\n\\\\s -> 匹配一个空白字符(空格、制表符...)\\n\\\\S是[^ \\\\t\\\\v\\\\n\\\\r\\\\f]。 非空白符。\\n\\\\b -> 匹配一个单词的边界\\n\\\\t -> 匹配一个制表符\\n\\\\n -> 匹配一个换行\\n. -> 匹配一个除了\\\\n以外的任意字符\\n^ -> 以某一个元字符开头\\n$ -> 以某一个元字符结尾\\n\\\\ -> 转义字符\\nx|y -> x或者y的一个\\n[xyz] -> x、y、z中的任意一个\\n[^xyz] -> 除了xyz中的任意一个字符\\n[a-z] -> 匹配a-z中的任意一个字符\\n[^a-z] -> 匹配除了a-z中的任意一个字符\\n() -> 正则中的分组\\n->+ : 出现一到多次\\n->* : 出现零到多次\\n->? : 出现零到一次\\n->{n} : 出现n次\\n->{n,} : 出现n到多次\\n->{n,m} : 出现n-m次\\n\\n要匹配任意字符, 可以使用[\\\\d\\\\D]、[\\\\w\\\\W]、[\\\\s\\\\S]和[^]中任何的一个\\n\\\\b是单词边界，具体就是\\\\w和\\\\W之间的位置，也包括\\\\w和^之间的位置，也包括\\\\w和$之间的位置。\\n\\\\B就是\\\\b的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉\\\\b，剩下的都是\\\\B的。\\n具体说来就是\\\\w与\\\\w、\\\\W与\\\\W、^与\\\\W，\\\\W与$之间的位置。\\n\")])])]),t(\"h3\",{attrs:{id:\"\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#\"}},[n._v(\"#\")]),n._v(\" [ ]\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('//->在中括号中出现的所有字符(不管之前代表什么意思),在这里都是只代表本身的意思\\n//var reg = /^[2.3]$/;//->.这里只代表小数点,不是任意字符了\\n//reg = /^[\\\\dz]$/;//->\\\\d本身整体就是0-9之间的数字,在这里还是这个意思\\n//->在中括号中出现的两位数不是一个两位数，而是左边或者右边的\\n//var reg = /^[10-23]$/;//->1或者0-2或者3\\n\\n在中括号中\"-\"具有连字符的作用,如果只想表示-,要么放在开头，要么放在结尾，要么转义\\n//var reg = /^[12-]$/;\\n\\n//->中括号本身也有特殊的意思,如果需要只代表中括号本身的意思,需要进行转义\\n//var reg = /^\\\\[\\\\d+\\\\]$/;//->\"[200]\"\\n\\n')])])]),t(\"h2\",{attrs:{id:\"-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#-2\"}},[n._v(\"#\")]),n._v(\" |\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"//var reg = /^1|2$/;//->和这个有区别:/^[12]$/\\n//->1、2、12\\n\\n//var reg = /^10|28$/;\\n//->10、28、1028、102、108、128、028 ->不是我们想要的那个10或者28了\\n\")])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('(?=p)，其中p是一个子模式，即p前面的位置。比如(?=l)，表示\\'l\\'字符前面的位置，例如：\\nvar result = \"hello\".replace(/(?=l)/g, \\'#\\');\\nconsole.log(result);\\n// => \"he#l#lo\"\\n\\n而(?!p)就是(?=p)的反面意思，比如：\\nvar result = \"hello\".replace(/(?!l)/g, \\'#\\');\\nconsole.log(result);\\n// => \"#h#ell#o#\"\\n\\n')])])]),t(\"p\",[n._v(\"不匹配任何东西的正则: /.^/\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"分组\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分组\"}},[n._v(\"#\")]),n._v(\" 分组\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('var regex = /(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/;\\nvar string = \"2017-06-12\";\\nconsole.log( string.match(regex) );\\n// => [\"2017-06-12\", \"2017\", \"06\", \"12\", index: 0, input: \"2017-06-12\"]\\n\\nmatch返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符g，match返回的数组格式是不一样的）\\n\\nexec\\nvar regex = /(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/;\\nvar string = \"2017-06-12\";\\nconsole.log( regex.exec(string) );\\n// => [\"2017-06-12\", \"2017\", \"06\", \"12\", index: 0, input: \"2017-06-12\"]\\n\\n$1 - $9\\nvar regex = /(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/;\\nvar string = \"2017-06-12\";\\n\\nregex.test(string); // 正则操作即可，例如\\n//regex.exec(string);\\n//string.match(regex);\\n\\nconsole.log(RegExp.$1); // \"2017\"\\nconsole.log(RegExp.$2); // \"06\"\\nconsole.log(RegExp.$3); // \"12\"\\n\\n替换\\n\\nvar regex = /(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/;\\nvar string = \"2017-06-12\";\\nvar result = string.replace(regex, \"$2/$3/$1\");\\nconsole.log(result);\\n// => \"06/12/2017\"\\n\\n等价于\\nvar regex = /(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/;\\nvar string = \"2017-06-12\";\\nvar result = string.replace(regex, function() {\\n\\treturn RegExp.$2 + \"/\" + RegExp.$3 + \"/\" + RegExp.$1;\\n});\\nconsole.log(result);\\n// => \"06/12/2017\"\\n\\n也等价于\\nvar regex = /(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/;\\nvar string = \"2017-06-12\";\\nvar result = string.replace(regex, function(match, year, month, day) {\\n\\treturn month + \"/\" + day + \"/\" + year;\\n});\\nconsole.log(result);\\n// => \"06/12/2017\"\\n\\n反向引用 ⭐️\\nvar regex = /\\\\d{4}(-|\\\\/|\\\\.)\\\\d{2}\\\\1\\\\d{2}/;\\nvar string1 = \"2017-06-12\";\\nvar string2 = \"2017/06/12\";\\nvar string3 = \"2017.06.12\";\\nvar string4 = \"2016-06/12\";\\nconsole.log( regex.test(string1) ); // true\\nconsole.log( regex.test(string2) ); // true\\nconsole.log( regex.test(string3) ); // true\\nconsole.log( regex.test(string4) ); // false\\n注意里面的\\\\1，表示的引用之前的那个分组(-|\\\\/|\\\\.)。不管它匹配到什么（比如-），\\\\1都匹配那个同样的具体某个字符。\\n\\n我们知道了\\\\1的含义后，那么\\\\2和\\\\3的概念也就理解了，即分别指代第二个和第三个分组。\\n\\n括号嵌套怎么办？\\n\\n以左括号（开括号）为准。比如：\\n\\nvar regex = /^((\\\\d)(\\\\d(\\\\d)))\\\\1\\\\2\\\\3\\\\4$/;\\nvar string = \"1231231233\";\\nconsole.log( regex.test(string) ); // true\\nconsole.log( RegExp.$1 ); // 123\\nconsole.log( RegExp.$2 ); // 1\\nconsole.log( RegExp.$3 ); // 23\\nconsole.log( RegExp.$4 ); // 3\\n\\n第一个字符是数字，比如说1，\\n第二个字符是数字，比如说2，\\n第三个字符是数字，比如说3，\\n接下来的是\\\\1，是第一个分组内容，那么看第一个开括号对应的分组是什么，是123，\\n接下来的是\\\\2，找到第2个开括号，对应的分组，匹配的内容是1，\\n接下来的是\\\\3，找到第3个开括号，对应的分组，匹配的内容是23，\\n最后的是\\\\4，找到第3个开括号，对应的分组，匹配的内容是3。\\n\\n\\n因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如\\\\2，就匹配\"\\\\2\"。注意\"\\\\2\"表示对\"2\"进行了转意。\\nvar regex = /\\\\1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\7\\\\8\\\\9/;\\nconsole.log( regex.test(\"\\\\1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\7\\\\8\\\\9\") );\\nconsole.log( \"\\\\1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\7\\\\8\\\\9\".split(\"\") );\\n\\n\\n非捕获分组 (?:p)\\n\\n\\n\\n匹配成对标签，那就需要使用反向引用\\n\\nvar regex = /<([^>]+)>[\\\\d\\\\D]*<\\\\/\\\\1>/;\\nvar string1 = \"<title>regular expression</title>\";\\nvar string2 = \"<p>laoyao bye bye</p>\";\\nvar string3 = \"<title>wrong!</p>\";\\nconsole.log( regex.test(string1) ); // true\\nconsole.log( regex.test(string2) ); // true\\nconsole.log( regex.test(string3) ); // false\\n\\n\\nvar string = \"12345\";\\nvar regex = /(\\\\d{1,3})(\\\\d{1,3})/;\\nconsole.log( string.match(regex) );\\n// => [\"12345\", \"123\", \"45\", index: 0, input: \"12345\"]\\n\\n惰性\\nvar string = \"12345\";\\nvar regex = /(\\\\d{1,3}?)(\\\\d{1,3})/;\\nconsole.log( string.match(regex) );\\n// => [\"1234\", \"1\", \"234\", index: 0, input: \"12345\"]\\n\\n\\n')])])]),t(\"h2\",{attrs:{id:\"正则表达式的拆分\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#正则表达式的拆分\"}},[n._v(\"#\")]),n._v(\" 正则表达式的拆分\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"优先级由高到低\\n1.转义符 \\\\\\n2.括号和方括号 (...)、(?:...)、(?=...)、(?!...)、[...]\\n3.量词限定符 {m}、{m,n}、{m,}、?、*、+\\n4.位置和序列 ^ 、$、 \\\\元字符、 一般字符\\n5. 管道符（竖杠）|\\n\")])])]),t(\"h2\",{attrs:{id:\"demo\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#demo\"}},[n._v(\"#\")]),n._v(\" demo\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"金额添加符号,\\nvar reg = /(?!^)(?=(\\\\d{3})+$)/g;\\nvar result = \\\"12345678\\\".replace(reg, ',')\\nconsole.log(result);\\n// => \\\"12,345,678\\\"\\n\\ntrim 两种实现\\n\\n第一种，匹配到开头和结尾的空白符，然后替换成空字符\\nfunction trim(str) {\\n\\treturn str.replace(/^\\\\s+|\\\\s+$/g, '');\\n}\\nconsole.log( trim(\\\"  foobar   \\\") );\\n// => \\\"foobar\\\"\\n\\n第二种，匹配整个字符串，然后用引用来提取出相应的数据\\nfunction trim(str) {\\n\\treturn str.replace(/^\\\\s*(.*?)\\\\s*$/g, \\\"$1\\\");\\n}\\nconsole.log( trim(\\\"  foobar   \\\") );\\n// => \\\"foobar\\\"\\n\\n\\n将每个单词的首字母转换为大写\\n\\nfunction titleize(str) {\\n\\treturn str.toLowerCase().replace(/(?:^|\\\\s)\\\\w/g, function(c) {\\n\\t\\treturn c.toUpperCase();\\n\\t});\\n}\\nconsole.log( titleize('my name is epeli') );\\n// => \\\"My Name Is Epeli\\\"\\n\\n\\n驼峰化\\n\\nfunction camelize(str) {\\n\\treturn str.replace(/[-_\\\\s]+(.)?/g, function(match, c) {\\n\\t\\treturn c ? c.toUpperCase() : '';\\n\\t});\\n}\\nconsole.log( camelize('-moz-transform') );\\n// => \\\"MozTransform\\\"\\n\\n中划线化\\n\\nfunction dasherize(str) {\\n\\treturn str.replace(/([A-Z])/g, '-$1').replace(/[-_\\\\s]+/g, '-').toLowerCase();\\n}\\nconsole.log( dasherize('MozTransform') );\\n// => \\\"-moz-transform\\\"\\n\\n\\nhtml 转义和反转义\\n\\n// 将HTML特殊字符转换成等值的实体\\nfunction escapeHTML(str) {\\n\\tvar escapeChars = {\\n\\t  '¢' : 'cent',\\n\\t  '£' : 'pound',\\n\\t  '¥' : 'yen',\\n\\t  '€': 'euro',\\n\\t  '©' :'copy',\\n\\t  '®' : 'reg',\\n\\t  '<' : 'lt',\\n\\t  '>' : 'gt',\\n\\t  '\\\"' : 'quot',\\n\\t  '&' : 'amp',\\n\\t  '\\\\'' : '#39'\\n\\t};\\n\\treturn str.replace(new RegExp('[' + Object.keys(escapeChars).join('') +']', 'g'), function(match) {\\n\\t\\treturn '&' + escapeChars[match] + ';';\\n\\t});\\n}\\nconsole.log( escapeHTML('<div>Blah blah blah</div>') );\\n// => \\\"&lt;div&gt;Blah blah blah&lt;/div&gt\\\";\\n\\n// 实体字符转换为等值的HTML。\\nfunction unescapeHTML(str) {\\n\\tvar htmlEntities = {\\n\\t  nbsp: ' ',\\n\\t  cent: '¢',\\n\\t  pound: '£',\\n\\t  yen: '¥',\\n\\t  euro: '€',\\n\\t  copy: '©',\\n\\t  reg: '®',\\n\\t  lt: '<',\\n\\t  gt: '>',\\n\\t  quot: '\\\"',\\n\\t  amp: '&',\\n\\t  apos: '\\\\''\\n\\t};\\n\\treturn str.replace(/\\\\&([^;]+);/g, function(match, key) {\\n\\t\\tif (key in htmlEntities) {\\n\\t\\t\\treturn htmlEntities[key];\\n\\t\\t}\\n\\t\\treturn match;\\n\\t});\\n}\\nconsole.log( unescapeHTML('&lt;div&gt;Blah blah blah&lt;/div&gt;') );\\n// => \\\"<div>Blah blah blah</div>\\\"\\n\\n\")])])]),t(\"p\",[n._v(\"从上面可以看出用于正则操作的方法，共有6个，字符串实例4个，正则实例2个：\")]),n._v(\" \"),t(\"p\",[n._v(\"String#search\")]),n._v(\" \"),t(\"p\",[n._v(\"String#split\")]),n._v(\" \"),t(\"p\",[n._v(\"String#match\")]),n._v(\" \"),t(\"p\",[n._v(\"String#replace\")]),n._v(\" \"),t(\"p\",[n._v(\"RegExp#test\")]),n._v(\" \"),t(\"p\",[n._v(\"RegExp#exec\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('注意点:\\nsearch和match，会把字符串转换为正则的。\\nmatch返回结果的格式，与正则对象是否有修饰符g有关\\nexec正则实例lastIndex属性，表示下一次匹配开始的位置\\n正则实例的两个方法exec、test，当正则是全局匹配时，每一次匹配完成后，都会修改lastIndex\\n\\nsplit相关注意事项\\n第一，它可以有第二个参数，表示结果数组的最大长度：\\nvar string = \"html,css,javascript\";\\nconsole.log( string.split(/,/, 2) );\\n// =>[\"html\", \"css\"]\\n第二，正则使用分组时，结果数组中是包含分隔符的：\\nvar string = \"html,css,javascript\";\\nconsole.log( string.split(/(,)/) );\\n// =>[\"html\", \",\", \"css\", \",\", \"javascript\"]\\n\\nreplace有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数\\n\\n当第二个参数是字符串时，如下的字符有特殊的含义：\\n\\n$1,$2,...,$99 匹配第1~99个分组里捕获的文本\\n$& 匹配到的子串文本\\n$` 匹配到的子串的左边文本\\n$\\' 匹配到的子串的右边文本\\n$$ 美元符号\\n\\n当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么\\n\"1234 2345 3456\".replace(/(\\\\d)\\\\d{2}(\\\\d)/g, function(match, $1, $2, index, input) {\\n\\tconsole.log([match, $1, $2, index, input]);\\n});\\n// => [\"1234\", \"1\", \"4\", 0, \"1234 2345 3456\"]\\n// => [\"2345\", \"2\", \"5\", 5, \"1234 2345 3456\"]\\n// => [\"3456\", \"3\", \"6\", 10, \"1234 2345 3456\"]\\n\\n\\n正则实例对象属性，除了global、ingnoreCase、multiline、lastIndex属性之外，还有一个source属性。\\n\\n在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么\\nvar className = \"high\";\\nvar regex = new RegExp(\"(^|\\\\\\\\s)\" + className + \"(\\\\\\\\s|$)\");\\nconsole.log( regex.source )\\n// => (^|\\\\s)high(\\\\s|$) 即字符串\"(^|\\\\\\\\s)high(\\\\\\\\s|$)\"\\n\\n\\n\\n构造函数属性构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是$1,...,$9之外，还有几个不太常用的属性（有兼容性问题）：RegExp.input 最近一次目标字符串，简写成RegExp[\"$_\"]RegExp.lastMatch 最近一次匹配的文本，简写成RegExp[\"$&\"]RegExp.lastParen 最近一次捕获的文本，简写成RegExp[\"$+\"]RegExp.leftContext 目标字符串中lastMatch之前的文本，简写成RegExp[\"$`\"]RegExp.rightContext 目标字符串中lastMatch之后的文本，简写成RegExp[\"$\\'\"]\\n\\nvar regex = /([abc])(\\\\d)/g;\\nvar string = \"a1b2c3d4e5\";\\nstring.match(regex);\\n\\nconsole.log( RegExp.input );\\nconsole.log( RegExp[\"$_\"]);\\n// => \"a1b2c3d4e5\"\\n\\nconsole.log( RegExp.lastMatch );\\nconsole.log( RegExp[\"$&\"] );\\n// => \"c3\"\\n\\nconsole.log( RegExp.lastParen );\\nconsole.log( RegExp[\"$+\"] );\\n// => \"3\"\\n\\nconsole.log( RegExp.leftContext );\\nconsole.log( RegExp[\"$`\"] );\\n// => \"a1b2\"\\n\\nconsole.log( RegExp.rightContext );\\nconsole.log( RegExp[\"$\\'\"] );\\n// => \"d4e5\"\\n\\n\\n\\n\\n')])])]),t(\"p\",[t(\"a\",{attrs:{href:\"https://juejin.im/post/5965943ff265da6c30653879#heading-26\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"正则全面讲解\"),t(\"OutboundLink\")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);","extractedComments":[]}