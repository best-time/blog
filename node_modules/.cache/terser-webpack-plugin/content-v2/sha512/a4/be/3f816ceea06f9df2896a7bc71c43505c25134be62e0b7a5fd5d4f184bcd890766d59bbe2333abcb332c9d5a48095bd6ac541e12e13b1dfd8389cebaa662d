{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{650:function(e,o,n){\"use strict\";n.r(o);var s=n(12),i=Object(s.a)({},(function(){var e=this,o=e.$createElement,n=e._self._c||o;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"基于-http-的前端鉴权背景\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基于-http-的前端鉴权背景\"}},[e._v(\"#\")]),e._v(\" \"),n(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s/rwp9sXi4Y8Ht0UbA6z4hSg\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"基于 HTTP 的前端鉴权背景\"),n(\"OutboundLink\")],1)]),e._v(\" \"),n(\"p\",[e._v(\"cookie 为什么是最方便的存储方案，有哪些操作 cookie 的方式\\nsession 方案是如何实现的，存在哪些问题\\ntoken 方案是如何实现的，如何进行编码和防篡改？jwt 是做什么的？refresh token 的实现和意义\\nsession 和 token 有什么异同和优缺点\\n单点登录是什么？实现思路和在浏览器下的处理\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"从状态说起\\n\\n「HTTP 无状态」我们知道，HTTP 是无状态的。也就是说，HTTP 请求方和响应方间无法维护状态，都是一次性的，它不知道前后的请求都发生了什么。但有的场景下，我们需要维护状态。最典型的，一个用户登陆微博，发布、关注、评论，都应是在登录后的用户状态下的。「标记」那解决办法是什么呢？::标记::。\\n\\n「前端存储」这就涉及到一发、一存、一带，发好办，登陆接口直接返回给前端，存储就需要前端想办法了。\\n\\n\\n基石：cookie\\ncookie。cookie 也是前端存储的一种，但相比于 localStorage 等其他方式，借助 HTTP 头、浏览器能力，cookie 可以做到前端无感知。一般过程是这样的：\\n在提供标记的接口，通过 HTTP 返回头的 Set-Cookie 字段，直接「种」到浏览器上\\n浏览器发起请求时，会自动把 cookie 通过 HTTP 请求头的 Cookie 字段，带给接口\\n「配置：Domain / Path」\\n\\ncookie 是要限制::「空间范围」::的，通过 Domain（域）/ Path（路径）两级。\\nDomain属性指定浏览器发出 HTTP 请求时，哪些域名要附带这个 Cookie。如果没有指定该属性，浏览器会默认将其设为当前 URL 的一级域名，比如 www.example.com 会设为 example.com，而且以后如果访问example.com的任何子域名，HTTP 请求也会带上这个 Cookie。如果服务器在Set-Cookie字段指定的域名，不属于当前域名，浏览器会拒绝这个 Cookie。Path属性指定浏览器发出 HTTP 请求时，哪些路径要附带这个 Cookie。只要浏览器发现，Path属性是 HTTP 请求路径的开头一部分，就会在头信息里面带上这个 Cookie。比如，PATH属性是/，那么请求/docs路径也会包含该 Cookie。当然，前提是域名必须一致。—— Cookie — JavaScript 标准参考教程（alpha）\\n\\n「配置：Expires / Max-Age」\\n\\ncookie 还可以限制::「时间范围」::，通过 Expires、Max-Age 中的一种。\\nExpires属性指定一个具体的到期时间，到了指定时间以后，浏览器就不再保留这个 Cookie。它的值是 UTC 格式。如果不设置该属性，或者设为null，Cookie 只在当前会话（session）有效，浏览器窗口一旦关闭，当前 Session 结束，该 Cookie 就会被删除。另外，浏览器根据本地时间，决定 Cookie 是否过期，由于本地时间是不精确的，所以没有办法保证 Cookie 一定会在服务器指定的时间过期。Max-Age属性指定从现在开始 Cookie 存在的秒数，比如60 * 60 * 24 * 365（即一年）。过了这个时间以后，浏览器就不再保留这个 Cookie。如果同时指定了Expires和Max-Age，那么Max-Age的值将优先生效。如果Set-Cookie字段没有指定Expires或Max-Age属性，那么这个 Cookie 就是 Session Cookie，即它只在本次对话存在，一旦用户关闭浏览器，浏览器就不会再保留这个 Cookie。—— Cookie — JavaScript 标准参考教程（alpha）\\n\\n\\n「配置：Secure / HttpOnly」\\n\\ncookie 可以限制::「使用方式」::。\\nSecure属性指定浏览器只有在加密协议 HTTPS 下，才能将这个 Cookie 发送到服务器。另一方面，如果当前协议是 HTTP，浏览器会自动忽略服务器发来的Secure属性。该属性只是一个开关，不需要指定值。如果通信是 HTTPS 协议，该开关自动打开。HttpOnly属性指定该 Cookie 无法通过 JavaScript 脚本拿到，主要是Document.cookie属性、XMLHttpRequest对象和 Request API 都拿不到该属性。这样就防止了该 Cookie 被脚本读到，只有浏览器发出 HTTP 请求时，才会带上该 Cookie。—— Cookie — JavaScript 标准参考教程（alpha）\\n\\n「HTTP 头对 cookie 的读写」回过头来，HTTP 是如何写入和传递 cookie 及其配置的呢？HTTP 返回的一个 Set-Cookie 头用于向浏览器写入「一条（且只能是一条）」cookie，格式为 cookie 键值 + 配置键值。\\n例如：\\nSet-Cookie: username=jimu; domain=jimu.com; path=/blog; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly\\n\\n那我想一次多 set 几个 cookie 怎么办？多给几个 Set-Cookie 头（一次 HTTP 请求中允许重复）\\nSet-Cookie: username=jimu; domain=jimu.com\\nSet-Cookie: height=180; domain=me.jimu.com\\nSet-Cookie: weight=80; domain=me.jimu.com\\n\\nHTTP 请求的 Cookie 头用于浏览器把符合当前「空间、时间、使用方式」配置的所有 cookie 一并发给服务端。因为由浏览器做了筛选判断，就不需要归还配置内容了，只要发送键值就可以。\\nCookie: username=jimu; height=180; weight=80\\n\\n\\n\\n「前端对 cookie 的读写」前端可以自己创建 cookie，如果服务端创建的 cookie 没加HttpOnly，那恭喜你也可以修改他给的 cookie。调用document.cookie可以创建、修改 cookie，和 HTTP 一样，一次document.cookie能且只能操作一个 cookie。\\ndocument.cookie = 'username=jimu; domain=jimu.com; path=/blog; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly';\\n\\n\\n\\n\")])])]),n(\"h2\",{attrs:{id:\"应用方案-服务端-session\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用方案-服务端-session\"}},[e._v(\"#\")]),e._v(\" 应用方案：服务端 session\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"\\n浏览器登录发送账号密码，服务端查用户库，校验用户\\n服务端把用户登录状态存为 Session，生成一个 sessionId\\n通过登录接口返回，把 sessionId set 到 cookie 上\\n此后浏览器再请求业务接口，sessionId 随 cookie 带上\\n服务端查 sessionId 校验 session\\n成功后正常做业务处理，返回结果\\n「Session 的存储方式」显然，服务端只是给 cookie 一个 sessionId，而 session 的具体内容（可能包含用户信息、session 状态等），要自己存一下。存储的方式有几种：\\nRedis（推荐）：内存型数据库，redis中文官方网站。以 key-value 的形式存，正合 sessionId-sessionData 的场景；且访问快。\\n内存：直接放到变量里。一旦服务重启就没了\\n数据库：普通数据库。性能不高。\\n「Session 的过期和销毁」很简单，只要把存储的 session 数据销毁就可以。「Session 的分布式问题」通常服务端是集群，而用户请求过来会走一次负载均衡，不一定打到哪台机器上。那一旦用户后续接口请求到的机器和他登录请求的机器不一致，或者登录请求的机器宕机了，session 不就失效了吗？这个问题现在有几种解决方式。\\n一是从「存储」角度，把 session 集中存储。如果我们用独立的 Redis 或普通数据库，就可以把 session 都存到一个库里。\\n二是从「分布」角度，让相同 IP 的请求在负载均衡时都打到同一台机器上。以 nginx 为例，可以配置 ip_hash 来实现。\\n但通常还是采用第一种方式，因为第二种相当于阉割了负载均衡，且仍没有解决「用户请求的机器宕机」的问题。「node.js 下的 session 处理」前面的图很清楚了，服务端要实现对 cookie 和 session 的存取，实现起来要做的事还是很多的\\n\\n\")])])]),n(\"h2\",{attrs:{id:\"应用方案-token\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用方案-token\"}},[e._v(\"#\")]),e._v(\" 应用方案：token\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('\\ntoken 的流程是这样的：\\n\\n用户登录，服务端校验账号密码，获得用户信息\\n把用户信息、token 配置编码成 token，通过 cookie set 到浏览器\\n此后用户请求业务接口，通过 cookie 携带 token\\n接口校验 token 有效性，进行正常业务接口处理\\n「客户端 token 的存储方式」在前面 cookie 说过，cookie 并不是客户端存储凭证的唯一方式。token 因为它的「无状态性」，有效期、使用限制都包在 token 内容里，对 cookie 的管理能力依赖较小，客户端存起来就显得更自由。但 web 应用的主流方式仍是放在 cookie 里，毕竟少操心。「token 的过期」那我们如何控制 token 的有效期呢？很简单，把「过期时间」和数据一起塞进去，验证时判断就好。\\n\\n\\n这里的 eyJ1c2VyaWQiOiJhIn0=，就是 {\"userid\":\"abb”} 的 base64 而已。「防篡改」\\n那问题来了，如果用户 cdd 拿{\"userid\":\"abb”}转了个 base64，再手动修改了自己的 token 为 eyJ1c2VyaWQiOiJhIn0=，是不是就能直接访问到 abb 的数据了？\\n是的。所以看情况，如果 token 涉及到敏感权限，就要想办法避免 token 被篡改。解决方案就是给 token 加签名，来识别 token 是否被篡改过。例如在 cookie-session - npm 库中，增加两项配置：\\nsecret: \\'iAmSecret\\',signed: true,\\n这样会多种一个 .sig cookie，里面的值就是 {\"userid\":\"abb”} 和 iAmSecret通过加密算法计算出来的，常见的比如HMACSHA256 类 (System.Security.Cryptography) | Microsoft Docs。\\n\\n\\n\\n\\ntoken，作为权限守护者，最重要的就是「安全」。业务接口用来鉴权的 token，我们称之为 access token。越是权限敏感的业务，我们越希望 access token 有效期足够短，以避免被盗用。但过短的有效期会造成 access token 经常过期，过期后怎么办呢？一种办法是，让用户重新登录获取新 token，显然不够友好，要知道有的 access token 过期时间可能只有几分钟。另外一种办法是，再来一个 token，一个专门生成 access token 的 token，我们称为 refresh token。\\naccess token 用来访问业务接口，由于有效期足够短，盗用风险小，也可以使请求方式更宽松灵活\\nrefresh token 用来获取 access token，有效期可以长一些，通过独立服务和严格的请求方式增加安全性；由于不常验证，也可以如前面的 session 一样处理\\n\\n\\n\\nsession 和 token\\n\\nsession 和 token 都是边界很模糊的概念，就像前面说的，refresh token 也可能以 session 的形式组织维护。狭义上，我们通常认为 session 是「种在 cookie 上、数据存在服务端」的认证方案，token 是「客户端存哪都行、数据存在 token 里」的认证方案。对 session 和 token 的对比本质上是「客户端存 cookie / 存别地儿」、「服务端存数据 / 不存数据」的对比。「客户端存 cookie / 存别地儿」存 cookie 固然方便不操心，但问题也很明显：\\n在浏览器端，可以用 cookie（实际上 token 就常用 cookie），但出了浏览器端，没有 cookie 怎么办？\\ncookie 是浏览器在域下自动携带的，这就容易引发 CSRF 攻击（前端安全系列（二）：如何防止CSRF攻击？- 美团技术团队）\\n存别的地方，可以解决没有 cookie 的场景；通过参数等方式手动带，可以避免 CSRF 攻击。「服务端存数据 / 不存数据」\\n存数据：请求只需携带 id，可以大幅缩短认证字符串长度，减小请求体积\\n不存数据：不需要服务端整套的解决方案和分布式处理，降低硬件成本；避免查库带来的验证延迟\\n\\n\\n')])])]),n(\"h2\",{attrs:{id:\"单点登录\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单点登录\"}},[e._v(\"#\")]),e._v(\" 单点登录\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"前面我们已经知道了，在同域下的客户端/服务端认证系统中，通过客户端携带凭证，维持一段时间内的登录状态。但当我们业务线越来越多，就会有更多业务系统分散到不同域名下，就需要「一次登录，全线通用」的能力，叫做「单点登录」。\\n\\n\\n\\n“虚假”的单点登录（主域名相同）\\n\\n简单的，如果业务系统都在同一主域名下，比如wenku.baidu.com tieba.baidu.com，就好办了。可以直接把 cookie domain 设置为主域名 baidu.com，百度也就是这么干的。\\n\\n“真实”的单点登录（主域名不同）\\n\\n比如滴滴这么潮的公司，同时拥有didichuxing.com xiaojukeji.com didiglobal.com等域名，种 cookie 是完全绕不开的。这要能实现「一次登录，全线通用」，才是真正的单点登录。这种场景下，我们需要独立的认证服务，通常被称为 SSO(single sign on)。「一次「从 A 系统引发登录，到 B 系统不用登录」的完整流程」\\n\\n\\n用户进入 A 系统，没有登录凭证（ticket），A 系统给他跳到 SSO\\nSSO 没登录过，也就没有 sso 系统下没有凭证（注意这个和前面 A ticket 是两回事），输入账号密码登录\\nSSO 账号密码验证成功，通过接口返回做两件事：一是种下 sso 系统下凭证（记录用户在 SSO 登录状态）；二是下发一个 ticket\\n客户端拿到 ticket，保存起来，带着请求系统 A 接口\\n系统 A 校验 ticket，成功后正常处理业务请求\\n此时用户第一次进入系统 B，没有登录凭证（ticket），B 系统给他跳到 SSO\\nSSO 登录过，系统下有凭证，不用再次登录，只需要下发 ticket\\n客户端拿到 ticket，保存起来，带着请求系统 B 接口\\n\\n\\n「完整版本：考虑浏览器的场景」上面的过程看起来没问题，实际上很多 APP 等端上这样就够了。但在浏览器下不见得好用。看这里：\\n\\n\\n对浏览器来说，SSO 域下返回的数据要怎么存，才能在访问 A 的时候带上？浏览器对跨域有严格限制，cookie、localStorage 等方式都是有域限制的。这就需要也只能由 A 提供 A 域下存储凭证的能力。一般我们是这么做的\\n\\n\\n在 SSO 域下，SSO 不是通过接口把 ticket 直接返回，而是通过一个带 code 的 URL 重定向到系统 A 的接口上，这个接口通常在 A 向 SSO 注册时约定\\n浏览器被重定向到 A 域下，带着 code 访问了 A 的 callback 接口，callback 接口通过 code 换取 ticket\\n这个 code 不同于 ticket，code 是一次性的，暴露在 URL 中，只为了传一下换 ticket，换完就失效\\ncallback 接口拿到 ticket 后，在自己的域下 set cookie 成功\\n在后续请求中，只需要把 cookie 中的 ticket 解析出来，去 SSO 验证就好\\n访问 B 系统也是一样\\n\\n\")])])]),n(\"h2\",{attrs:{id:\"总结\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[e._v(\"#\")]),e._v(\" 总结\")]),e._v(\" \"),n(\"p\",[e._v(\"HTTP 是无状态的，为了维持前后请求，需要前端存储标记\\ncookie 是一种完善的标记方式，通过 HTTP 头或 js 操作，有对应的安全策略，是大多数状态管理方案的基石\\nsession 是一种状态管理方案，前端通过 cookie 存储 id，后端存储数据，但后端要处理分布式问题\\ntoken 是另一种状态管理方案，相比于 session 不需要后端存储，数据全部存在前端，解放后端，释放灵活性\\ntoken 的编码技术，通常基于 base64，或增加加密算法防篡改，jwt 是一种成熟的编码方案\\n在复杂系统中，token 可通过 service token、refresh token 的分权，同时满足安全性和用户体验\\nsession 和 token 的对比就是「用不用cookie」和「后端存不存」的对比\\n单点登录要求不同域下的系统「一次登录，全线通用」，通常由独立的 SSO 系统记录登录状态、下发 ticket，各业务系统配合存储和认证 ticket\")])])}),[],!1,null,null,null);o.default=i.exports}}]);","extractedComments":[]}