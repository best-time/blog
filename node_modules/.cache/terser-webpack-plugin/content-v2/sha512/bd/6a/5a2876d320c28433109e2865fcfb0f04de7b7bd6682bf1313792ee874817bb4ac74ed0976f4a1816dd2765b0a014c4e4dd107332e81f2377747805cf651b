{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{670:function(n,e,r){\"use strict\";r.r(e);var a=r(12),t=Object(a.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":this.$parent.slotKey}},[e(\"p\",[this._v(\"堆排序\")]),this._v(\" \"),e(\"p\",[this._v(\"堆排序思路：\\n1.让数组变成大根堆\\n2.把最后一个位置和堆顶做交换\\n3.则最大值在最后，则剩下部分做heapify，则重新调整为大根堆，则堆顶位置和该部分最后位置做交换\\n4.重复进行，直到减完，则这样最后就调整完毕，整个数组排完序（为一个升序）\\n时间复杂度:O(N * logN)\\n空间复杂度:O(1)\")]),this._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[this._v(\"function heapSort(arr) {\\n    if(arr == null || arr.length <= 0) {\\n        return [];\\n    }\\n\\n    //首先是建立大顶堆的过程\\n    for(var i = 0; i < arr.length; i++) {\\n        heapInsert(arr, i);\\n    }\\n    var size = arr.length;//这个值用来指定多少个数组成堆，当得到一个排序的值后这个值减一\\n    //将堆顶和最后一个位置交换\\n    /**\\n     * 当大顶堆建立完成后，然后不断将最后一个位置和堆顶交换；\\n     * 这样最大值就到了最后，则剩下部分做heapify，重新调整为大根堆，则堆顶位置和倒数第二个位置交换，重复进行，直到全部排序完毕*/\\n    //由于前面已经是大顶堆，所以直接交换\\n    swap(arr, 0, --size);\\n    while(size > 0) {\\n        //重新变成大顶堆\\n        heapify(arr, 0, size);\\n        //进行交换\\n        swap(arr, 0, --size);\\n    }\\n}\\n\\n//加堆过程中\\nfunction heapInsert(arr, index) {\\n    //比较当前位置和其父位置，若大于其父位置，则进行交换，并将索引移动到其父位置进行循环，否则跳过\\n    //结束条件是比父位置小或者到达根节点处\\n    while(arr[index] > arr[parseInt((index - 1) / 2)]){\\n        //进行交换\\n        swap(arr, index, parseInt((index - 1) / 2));\\n        index = parseInt((index - 1) / 2);\\n    }\\n}\\n//减堆过程\\n/**\\n * size指的是这个数组前多少个数构成一个堆\\n * 如果你想把堆顶弹出，则把堆顶和最后一个数交换，把size减1，然后从0位置经历一次heapify，调整一下，剩余部分变成大顶堆*/\\nfunction heapify(arr, index, size) {\\n    var left = 2 * index + 1;\\n    while(left < size) {\\n        var largest = (left + 1 < size && arr[left] < arr[left + 1]) ? left + 1 : left;\\n        largest = arr[index] > arr[largest] ? index : largest;\\n\\n        //如果最大值索引和传进来索引一样，则该值到达指定位置，直接结束循环\\n        if(index == largest) {\\n            break;\\n        }\\n\\n        //进行交换，并改变索引和其左子节点\\n        swap(arr, index, largest);\\n        index = largest;\\n        left = 2 * index + 1;\\n    }\\n}\\n\\nfunction swap(arr, i, j) {\\n    var temp = arr[i];\\n    arr[i] = arr[j];\\n    arr[j] = temp;\\n}\\n\")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);","extractedComments":[]}