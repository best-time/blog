(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{553:function(n,t,s){"use strict";s.r(t);var a=s(12),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\n\n4.3. 属性嵌套 (Nested Properties)\n有些 CSS 属性遵循相同的命名空间 (namespace)，比如 font-family, font-size, font-weight 都以 font 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，Sass 允许将属性嵌套在命名空间中，例如：\n\n.funky {\n  font: {\n    family: fantasy;\n    size: 30em;\n    weight: bold;\n  }\n}\n编译为\n\n.funky {\n  font-family: fantasy;\n  font-size: 30em;\n  font-weight: bold; }\n\n\n  命名空间也可以包含自己的属性值，例如：\n\n.funky {\n  font: 20px/24px {\n    family: fantasy;\n    weight: bold;\n  }\n}\n编译为\n\n.funky {\n  font: 20px/24px;\n    font-family: fantasy;\n    font-weight: bold; }\n\n\n  @mixin icon {\n  transition: background-color ease .2s;\n  margin: 0 .5em;\n}\n\n.error-icon {\n  @include icon;\n  /*错误图标指定的样式... */\n}\n\n.info-icon {\n  @include icon;\n  /* 信息图标指定的样式... */\n}\n编译出来的CSS：\n\n.error-icon {\n  transition: background-color ease .2s;\n  margin: 0 .5em;\n  /*错误图标指定的样式... */\n}\n\n.info-icon {\n  transition: background-color ease .2s;\n  margin: 0 .5em;\n  /* 信息图标指定的样式... */\n}\n仅从维护的角度来说，这是一个很好的扩展的示例，\n但编译出来的CSS实在是糟糕，因为编译出来的CSS样式，没有把相同的样式合并在一起。\n\n\n  使用@extend调用定义好的选择器占位符%placeholder有所限制，他不能在不同的@media中运行。\n\n\n\n  6.7. 插值语句 #{} (Interpolation: #{})\n通过 #{} 插值语句可以在选择器或属性名中使用变量：\n\n$name: foo;\n$attr: border;\np.#{$name} {\n  #{$attr}-color: blue;\n}\n编译为\n\np.foo {\n  border-color: blue; }\n\n\n  7.2. @media\nSass 中 @media 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 @media 嵌套在 CSS 规则内，编译时，@media 将被编译到文件的最外层，包含嵌套的父选择器。这个功能让 @media 用起来更方便，不需要重复使用选择器，也不会打乱 CSS 的书写流程。\n\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n编译为\n\n.sidebar {\n  width: 300px; }\n  @media screen and (orientation: landscape) {\n    .sidebar {\n      width: 500px; } }\n\n      @media 的 queries 允许互相嵌套使用，编译时，Sass 自动添加 and\n\n@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n编译为\n\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px; } }\n@media 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值：\n\n$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n编译为\n\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px; } }\n\n\n    7.4. @at-root\n    .parent {\n  ...\n  @at-root .child { ... }\n}\nWhich would produce:\n\n.parent { ... }\n.child { ... }\nOr it can be used with a block containing multiple selectors:\n\n.parent {\n  ...\n  @at-root {\n    .child1 { ... }\n    .child2 { ... }\n  }\n  .step-child { ... }\n}\nWhich would output the following:\n\n.parent { ... }\n.child1 { ... }\n.child2 { ... }\n.parent .step-child { ... }\n\n\n\n\n\n9.3. 参数 (Arguments)\n参数用于给混合指令中的样式设定变量，并且赋值使用。在定义混合指令的时候，按照变量的格式，通过逗号分隔，将参数写进圆括号里。引用指令时，按照参数的顺序，再将所赋的值对应写进括号：\n\n@mixin sexy-border($color, $width) {\n  border: {\n    color: $color;\n    width: $width;\n    style: dashed;\n  }\n}\np { @include sexy-border(blue, 1in); }\n编译为\n\np {\n  border-color: blue;\n  border-width: 1in;\n  border-style: dashed; }\n\n\n\n10. 函数指令 (Function Directives)\nSass 支持自定义函数，并能在任何属性值或 Sass script 中使用：\n\n$grid-width: 40px;\n$gutter-width: 10px;\n\n@function grid-width($n) {\n  @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n\n#sidebar { width: grid-width(5); }\n编译为\n\n#sidebar {\n  width: 240px; }\n\n\n\n\n")])])]),s("h2",{attrs:{id:"scss-和-less-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scss-和-less-区别"}},[n._v("#")]),n._v(" scss 和 less 区别")]),n._v(" "),s("ul",[s("li",[n._v("声明变量 LESS用@符号，SCSS用$符号表示")])]),n._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[n._v(" "),s("span",{pre:!0,attrs:{class:"token atrule"}},[s("span",{pre:!0,attrs:{class:"token rule"}},[n._v("@main-top")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" search"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")])]),n._v("\n "),s("span",{pre:!0,attrs:{class:"token selector"}},[n._v(".@")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" main-top "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n     font-size ： 24px；\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[n._v("color")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" #fff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n // 是用LESS，定义类，类选择器选中search标签，给其设置css样式\n\n\n$"),s("span",{pre:!0,attrs:{class:"token property"}},[n._v("main-top")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" search"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[n._v(".@")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" main-top "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n font-size ： 24px；\n "),s("span",{pre:!0,attrs:{class:"token property"}},[n._v("color")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" #fff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n// 是用SCSS，定义类，类选择器选中search标签，给其设置css样式\n")])])]),s("ul",[s("li",[n._v("scss 支持条件语句,less不支持")])]),n._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[n._v(" ​\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/* Sample Sass “if” statement */")]),n._v("\n \n "),s("span",{pre:!0,attrs:{class:"token atrule"}},[s("span",{pre:!0,attrs:{class:"token rule"}},[n._v("@if")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("lightness")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("$color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" > 30%")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n \n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token atrule"}},[s("span",{pre:!0,attrs:{class:"token rule"}},[n._v("@else")])]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n \n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/* Sample Sass “for” loop */")]),n._v("\n \n "),s("span",{pre:!0,attrs:{class:"token atrule"}},[s("span",{pre:!0,attrs:{class:"token rule"}},[n._v("@for")]),n._v(" $i from 1 to 10")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n   "),s("span",{pre:!0,attrs:{class:"token selector"}},[n._v(".border-#")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("$i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n     "),s("span",{pre:!0,attrs:{class:"token selector"}},[n._v("border: #")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("$i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("px solid blue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n ​\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);