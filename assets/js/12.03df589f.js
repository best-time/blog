(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{552:function(t,n,e){"use strict";e.r(n);var a=e(12),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"vertical-align"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vertical-align"}},[t._v("#")]),t._v(" vertical-align")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("属性值：\n\n\t线类：baseline、top、middle、bottom\n\t文本类：text-top、text-bottom\n\t上标下标类：sub、super\n\t数值百分比类：20px、2em、20%等（对于基线往上或往下偏移）\n\n\n温馨提示：负值相对于基线往下偏移，正值往上偏移，事实上vertical-align:base-line等同于vertical-align:0。这个负值真的是 CSS 神器！\n\nvertical-align生效前提：\n\n什么情况生效\n内联元素span、strong、em、img、button、input等\ndisplay值为inline、inline-block、inline-table或table-cell的元素\n需要注意浮动和绝对定位会让元素块状化，因此此元素绝对不会生效\n\n")])])]),e("h2",{attrs:{id:"伪类和伪元素的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#伪类和伪元素的区别"}},[t._v("#")]),t._v(" 伪类和伪元素的区别")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n\n伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。\n下面分别对伪类和伪元素进行解释：\n伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。\n比如说，当用户悬停在指定的元素时，我们可以通过:hover来描述这个元素的状态。虽然它和普通的css类相似，\n可以为已有的元素添加样式，但是它只有处于dom树无法描述的状态下才能为元素添加样式，所以将其称为伪类。\n伪元素用于创建一些不在文档树中的元素，并为其添加样式。\n比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。\n区别\n伪类的操作对象是文档树中已有的元素，而伪元素则创建了一个文档树外的元素。因此，伪类与伪元素的区别在于：有没有创建一个文档树之外的元素。\nCSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，\n:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。\n\n")])])]),e("h2",{attrs:{id:"bfc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bfc"}},[t._v("#")]),t._v(" BFC")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nBFC 全称为块级格式化上下文 (Block Formatting Context) 。\nBFC是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位以及与其他元素的关系和相互作用，\n当涉及到可视化布局的时候，Block Formatting Context提供了一个环境，HTML元素在这个环境中按照一定规则进行布局。\n一个环境中的元素不会影响到其它环境中的布局。比如浮动元素会形成BFC，浮动元素内部子元素的主要受该浮动元素影响，两个浮动元素之间是互不影响的。\n这里有点类似一个BFC就是一个独立的行政单位的意思。可以说BFC就是一个作用范围，把它理解成是一个独立的容器，并且这个容器里box的布局与这个容器外的box毫不相干。\n\n触发BFC的条件\n\n\t根元素或其它包含它的元素\n\t浮动元素 (元素的 float 不是 none)\n\t绝对定位元素 (元素具有 position 为 absolute 或 fixed)\n\t内联块 (元素具有 display: inline-block)\n\t表格单元格 (元素具有 display: table-cell，HTML表格单元格默认属性)\n\t表格标题 (元素具有 display: table-caption, HTML表格标题默认属性)\n\t具有overflow 且值不是 visible 的块元素\n\t弹性盒（flex或inline-flex）\n\tdisplay: flow-root\n\tcolumn-span: all\n\nBFC的约束规则\n\n\t内部的盒会在垂直方向一个接一个排列（可以看作BFC中有一个的常规流）\n\t处于同一个BFC中的元素相互影响，可能会发生外边距重叠\n\t每个元素的margin box的左边，与容器块border box的左边相接触(对于从左往右的格式化，否则相反)，即使存在浮动也是如此\n\tBFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然\n\t计算BFC的高度时，考虑BFC所包含的所有元素，连浮动元素也参与计算\n\t浮动盒区域不叠加到BFC上\n\nBFC可以解决的问题\n\n\t垂直外边距重叠问题\n\t去除浮动\n\t自适用两列布局（float + overflow）\n\n\nBFC的概念\nBFC 是 Block Formatting Context 的缩写，即块级格式化上下文。BFC是CSS布局的一个概念，是一个独立的渲染区域，规定了内部box如何布局，\n并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。\n\nBFC的原理布局规则\n\n\t内部的Box会在垂直方向，一个接一个地放置\n\tBox垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n\t每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反\n\tBFC的区域不会与float box重叠\n\tBFC是一个独立容器，容器里面的子元素不会影响到外面的元素\n\t计算BFC的高度时，浮动元素也参与计算高度\n\t元素的类型和display属性，决定了这个Box的类型。不同类型的Box会参与不同的Formatting Context。\n\n如何创建BFC？\n\n\t根元素，即HTML元素\n\tfloat的值不为none\n\tposition为absolute或fixed\n\tdisplay的值为inline-block、table-cell、table-caption\n\toverflow的值不为visible\n\nBFC的使用场景\n\n\t去除边距重叠现象\n\t清除浮动（让父元素的高度包含子浮动元素）\n\t避免某元素被浮动元素覆盖\n\t避免多列布局由于宽度计算四舍五入而自动换行\n\n\n")])])]),e("h2",{attrs:{id:"层级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#层级"}},[t._v("#")]),t._v(" 层级")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("background/border    \nz-index < 0\nblock块级水平盒子\nfloat浮动盒子\ninline/inline-block水平盒子\nz-index:  auto 或者0;\nz-index > 0\n")])])]),e("h2",{attrs:{id:"语义化标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语义化标签"}},[t._v("#")]),t._v(" 语义化标签")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("header nav main article section aside footer\n\n\n语义化的优点:\n\n\t在没CSS样式的情况下，页面整体也会呈现很好的结构效果\n\t代码结构清晰，易于阅读，\n\t利于开发和维护 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。\n\t有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重\n\n\n")])])]),e("h2",{attrs:{id:"水平居中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#水平居中"}},[t._v("#")]),t._v(" 水平居中")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://juejin.cn/post/7008348524530106381\n\n对于 行内元素 : text-align: center;\n\n对于确定宽度的块级元素：\n（1）width和margin实现。margin: 0 auto;\n（2）绝对定位和margin-left: (父width - 子width）/2, 前提是父元素position: relative\n\n\n对于宽度未知的块级元素\n（1）table标签配合margin左右auto实现水平居中。使用table标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右margin为auto。\n（2）inline-block实现水平居中方法。display：inline-block和text-align:center实现水平居中。\n（3）绝对定位+transform，translateX可以移动本身元素的50%。\n（4）flex布局使用justify-content:center\n\n\n\n\n垂直居中\n\n\t利用 line-height 实现居中，这种方法适合纯文字类\n\t通过设置父容器 相对定位 ，子级设置 绝对定位，标签通过margin实现自适应居中\n\t弹性布局 flex :父级设置display: flex; 子级设置margin为auto实现自适应居中\n\t父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现\n\ttable 布局，父级通过转换成表格形式，然后子级设置 vertical-align 实现。（需要注意的是：vertical-align: middle使用的前提条件是内联元素以及display值为table-cell的元素）。\n\n")])])]),e("h2",{attrs:{id:"flex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex"}},[t._v("#")]),t._v(" Flex")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\nFlex 是 Flexible Box 的缩写，意为"弹性布局",用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。\n容器的属性：\n\n\tflex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;\n\tflex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;\n\tflex-flow： .box { flex-flow: || ; }\n\tjustify-content：对其方式，水平主轴对齐方式\n\talign-items：对齐方式，竖直轴线方向\n\talign-content\n\n项目的属性（元素的属性）：\n\n\torder 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0\n\tflex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大\n\tflex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小\n\tflex-basis 属性：定义了在分配多余的空间，项目占据的空间。\n\tflex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。\n\talign-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖\n\talign-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局\n\n\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n## 清除浮动\n\n1. <div class="parent">\n    //添加额外标签并且添加clear属性\n    <div style="clear:both"></div>\n    //也可以加一个br标签\n</div>\n\n2. 父级添加overflow属性，或者设置高度\n\n3. //在css中添加:after伪元素\n   .parent:after{\n   /* 设置添加子元素的内容是空 */\n   content: \'\';\n   /* 设置添加子元素为块级元素 */\n   display: block;\n   /* 设置添加的子元素的高度0 */\n   height: 0;\n   /* 设置添加子元素看不见 */\n   visibility: hidden;\n   /* 设置clear：both */\n   clear: both;\n   }\n\n')])])]),e("h2",{attrs:{id:"切换主题-换肤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#切换主题-换肤"}},[t._v("#")]),t._v(" 切换主题(换肤)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("多套样式\n\nvuex 切换  \n缺点: 代码量大  样式不易管理 开发效率低 拓展性差\n\nlink 动态加载css文件\n缺点: 重复cv多套文件 没有提取公共样式 需提前知道打包后路径,易引入错误\n\ncss变量  兼容性\nbody.style.setProperty(key, value)\ncss-vars-ponyfill\n\n1. 自定义样式适配\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\x3c!-- html 节点添加主题自定义属性 --\x3e\n<html data-theme=\"light\">\n  \x3c!-- 使用CSS变量控制样式 --\x3e\n\t<body style=\"background: var(--body-background)\"></body>\n</html>\n\n\n// 跟主题无关的变量放到root里\n:root {\n    --border-radius-base: 6px;\n}\n\n// 跟主题相关变量，通过属性选择器提升优先级\nhtml[data-theme='default']:root {\n    --body-background: #efefef;\n}\n\nhtml[data-theme='dark']:root {\n    --body-background: #000;\n}\n\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("2. ui库适配\n   \n   <html data-theme=\"light\"></html>\n   \n   html[data-theme='light'] .ant-button {color: #fff}\n   html[data-theme='dark'] .ant-button {color: #000}\n   \n   \n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n```javscript\n    //3. 动态切换\n\n   // 页面切换主题具体需要从下面三个维度来考虑：\n   \n   // 系统主题更换\n   // 页面提供主题切换按钮，用户主动切换\n   // 通过URL控制当前主题\n   \n   body {\n     background: var(--body-background);\n     transition: background 0.3s;\n   }\n   \n   @media (prefers-color-scheme: light) {\n     :root {\n       --body-background: #efefef;\n       --text-color: #333;\n     }\n   }\n   \n   @media (prefers-color-scheme: dark) {\n     :root {\n       --body-background: #000;\n       --text-color: #ededed;\n     }\n   }\n   \n   \n    跟随主题\n   // 给HTML DOM节点添加自定义主题，标识当前主题\n   const toggleTheme = (isDarkMode) => {\n   \tconst htmlEl = document.documentElement;\n     htmlEl.setAttribute("data-theme", isDarkMode ? "dark" : "light");\n   };\n   \n   const themeMedia = window.matchMedia("(prefers-color-scheme: dark)");\n   \n   // 页面初始化切换\n   toggleTheme(themeMedia.matches);\n   \n   // 监听系统切换\n   themeMedia.addListener((e) => {\n     toggleTheme(e.matches);\n   });\n   \n   \n   # 按钮切换\n   const buttonEl = document.getElementById("btn");\n   \n   buttonEl.addEventListener("click", () => {\n     const currentTheme = htmlEl.getAttribute("data-theme");\n     const nextTheme = currentTheme === "dark" ? "light" : "dark";\n   \n     htmlEl.setAttribute("data-theme", nextTheme);\n   });\n   \n   # url 切换\n   \n   const search = new URLSearchParams(location.search);\n   const theme = search.get("theme") || "light";\n   \n   document.documentElement.setAttribute("data-theme", theme);\n   \n   \n   webpack 打包  自定义插件\n   \n   // vue.config.js\n\t\tconst fs = require("fs");\n\t\tconst webpack = require("webpack");\n\t\t\n\t\t// 获取主题文件名\n\t\tconst themeFiles = fs.readdirSync("./src/style/theme");\n\t\tlet ThemesArr = [];\n\t\tthemeFiles.forEach(function (item, index) {\n\t\t  let stat = fs.lstatSync("./src/style/theme/" + item);\n\t\t  if (stat.isDirectory() === true) {\n\t\t    ThemesArr.push(item);\n\t\t  }\n\t\t});\n\t\t\n\t\tmodule.exports = {\n\t\t  css: {...},\n\t\t  configureWebpack: (config) => {\n\t\t    return {\n\t\t      plugins: [\n\t\t        // 自定义webpack插件\n\t\t        new webpack.DefinePlugin({\n\t\t          THEMEARR: JSON.stringify(ThemesArr),\n\t\t        }),\n\t\t      ],\n\t\t    };\n\t\t  },\n\t\t};\n\n    使用\n\n    // App.vue\n    mounted() {\n    document.getElementsByTagName("body")[0].setAttribute("data-theme", "default");\n    },\n\n\t// Home.vue\n\t\tmounted() {\n\t\t  this.themeValue = THEMEARR;\n\t\t  this.currentThemeIndex = this.themeValue.findIndex(\n\t\t    (theme) => theme === "default"\n\t\t  );\n\t\t  this.currentTheme = this.themeValue[this.currentThemeIndex];\n\t\t},\n\t\tmethods: {\n\t\t  onConfirm(currentTheme) {\n\t\t    this.currentTheme = currentTheme;\n\t\t    this.showPicker = false;\n\t\t    this.currentThemeIndex = this.themeValue.findIndex(\n\t\t      (theme) => theme === currentTheme\n\t\t    );\n\t\t    document\n\t\t      .getElementsByTagName("body")[0]\n\t\t      .setAttribute("data-theme", THEMEARR[this.currentThemeIndex]);\n\t\t  },\n\t\t}\n\n')])])]),e("h1",{attrs:{id:"css"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css"}},[t._v("#")]),t._v(" css")]),t._v(" "),e("h4",{attrs:{id:"visibility-collapse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#visibility-collapse"}},[t._v("#")]),t._v(" visibility : collapse")]),t._v(" "),e("p",[t._v("它的表现跟visibility：hidden;是一样的。元素是不可见的，但此时仍占用页面空间")]),t._v(" "),e("p",[t._v("但例外的是，如果这个元素是table相关的元素，例如table行，table group，table列，table column group，它的\n表现却跟display:none一样，也就是说，它们占用的空间也会释放。")]),t._v(" "),e("p",[t._v("在不同浏览器下的区别：")]),t._v(" "),e("p",[t._v("在谷歌浏览器里，使用collapse值和使用hidden值没有什么区别。")]),t._v(" "),e("p",[t._v("在火狐浏览器、Opera和IE11里，使用collapse值的效果就如它的字面意思：table的行会消失，它的下面一行会补充它的位\n置。")]),t._v(" "),e("h4",{attrs:{id:"width-auto-和-width-100-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#width-auto-和-width-100-的区别"}},[t._v("#")]),t._v(" width:auto 和 width:100%的区别")]),t._v(" "),e("p",[t._v("width:100%会使元素box的宽度等于父元素的content box的宽度。")]),t._v(" "),e("p",[t._v("width:auto会使元素撑满整个父元素，margin、border、padding、content区域会自动分配水平空间。")]),t._v(" "),e("h4",{attrs:{id:"绝对定位元素与非绝对定位元素的百分比计算的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#绝对定位元素与非绝对定位元素的百分比计算的区别"}},[t._v("#")]),t._v(" 绝对定位元素与非绝对定位元素的百分比计算的区别")]),t._v(" "),e("p",[t._v("绝对定位元素的宽高百分比是相对于临近的position不为static的祖先元素的padding box来计算的。")]),t._v(" "),e("p",[t._v("非绝对定位元素的宽高百分比则是相对于父元素的content box来计算的。")]),t._v(" "),e("h4",{attrs:{id:"base64-编码的优点和缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#base64-编码的优点和缺点"}},[t._v("#")]),t._v(" base64 编码的优点和缺点")]),t._v(" "),e("p",[t._v("优点是：")]),t._v(" "),e("p",[t._v("（1）减少一个图片的HTTP请求")]),t._v(" "),e("p",[t._v("缺点是：")]),t._v(" "),e("p",[t._v("（1）根据base64的编码原理，编码后的大小会比原文件大小大1/3，如果把大图片编码到html/css中，不仅会造成文件体\n积的增加，影响文件的加载速度，还会增加浏览器对html或css文件解析渲染的时间。")]),t._v(" "),e("p",[t._v("（2）使用base64无法直接缓存，要缓存只能缓存包含base64的文件，比如HTML或者CSS，这相比域直接缓存图片的效果要\n差很多。")]),t._v(" "),e("p",[t._v("（3）兼容性的问题，ie8以前的浏览器不支持。")]),t._v(" "),e("h4",{attrs:{id:"margin重叠"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#margin重叠"}},[t._v("#")]),t._v(" margin重叠")]),t._v(" "),e("ol",[e("li",[t._v("外层元素padding代替")]),t._v(" "),e("li",[t._v("外层元素透明边框 border:1px solid transparent;")]),t._v(" "),e("li",[t._v("内层元素绝对定位 postion:absolute:")]),t._v(" "),e("li",[t._v("外层元素 overflow:hidden;display: flex|inline-flex")]),t._v(" "),e("li",[t._v("内层元素 加float:left;或display:inline-block|table-cell或table-caption")]),t._v(" "),e("li",[t._v("外层元素padding:1px;")])]),t._v(" "),e("p",[t._v("BFC指的是块级格式化上下文，一个元素形成了BFC之后，那么它内部元素产生的布局不会影响到外部元素，外部元素的布局也\n不会影响到BFC中的内部元素。一个BFC就像是一个隔离区域，和其他区域互不影响。")]),t._v(" "),e("p",[t._v("一般来说根元素是一个BFC区域，浮动和绝对定位的元素也会形成BFC，display属性的值为inline-block、flex这些\n属性时也会创建BFC。还有就是元素的overflow的值不为visible时都会创建BFC。")]),t._v(" "),e("h4",{attrs:{id:"clear-属性清除浮动的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clear-属性清除浮动的原理"}},[t._v("#")]),t._v(" clear 属性清除浮动的原理")]),t._v(" "),e("p",[t._v("clear:none|left|right|both")]),t._v(" "),e("p",[t._v("如果单看字面意思，clear:left应该是“清除左浮动”，clear:right应该是“清除右浮动”的意思，实际上，这种解释是有问\n题的，因为浮动一直还在，并没有清除。")]),t._v(" "),e("p",[t._v("官方对clear属性的解释是：“元素盒子的边不能和前面的浮动元素相邻。”，我们对元素设置clear属性是为了避免浮动元素\n对该元素的影响，而不是清除掉浮动。")]),t._v(" "),e("p",[t._v("还需要注意的一点是clear属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“前面的”3个字，也就是clear属\n性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear\n属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left\n等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和cle\nar:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。")]),t._v(" "),e("p",[t._v("一般使用伪元素的方式清除浮动")]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".clear::after")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("table"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //也可以是"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'block'")]),t._v("，或者是"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'list-item'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("clear")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("both"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("clear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置disp\nlay属性值的原因。")]),t._v(" "),e("h4",{attrs:{id:"zoom-1-的清除浮动原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zoom-1-的清除浮动原理"}},[t._v("#")]),t._v(" zoom:1 的清除浮动原理")]),t._v(" "),e("p",[t._v("清除浮动，触发hasLayout；\nzoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。譬如外边距（margin）\n的重叠，浮动清除，触发ie的haslayout属性等。")]),t._v(" "),e("p",[t._v("来龙去脉大概如下：\n当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发\n生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。")]),t._v(" "),e("p",[t._v("zoom属性是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标\n准化，出现在CSS3.0规范草案中。")]),t._v(" "),e("p",[t._v("目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？可以通过css3里面的动画属性scale进行缩放。")]),t._v(" "),e("h4",{attrs:{id:"css-优化、提高性能的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-优化、提高性能的方法"}},[t._v("#")]),t._v(" CSS 优化、提高性能的方法")]),t._v(" "),e("h5",{attrs:{id:"加载性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加载性能"}},[t._v("#")]),t._v(" 加载性能：")]),t._v(" "),e("p",[t._v("（1）css压缩：将写好的css进行打包压缩，可以减少很多的体积。\n（2）css单一样式：当需要下边距和左边距的时候，很多时候选择:margin:top 0 bottom 0;但margin-bottom:bot\ntom;margin-left:left;执行的效率更高。\n（3）减少使用@import,而建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。")]),t._v(" "),e("h5",{attrs:{id:"选择器性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择器性能"}},[t._v("#")]),t._v(" 选择器性能：")]),t._v(" "),e("p",[t._v("（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到\n左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；")]),t._v(" "),e("p",[t._v("（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹\n配它们了）。")]),t._v(" "),e("p",[t._v("（3）避免使用通配规则，如*{}计算次数惊人！只对需要用到的元素进行选择。")]),t._v(" "),e("p",[t._v("（4）尽量少的去对标签进行选择，而是用class。")]),t._v(" "),e("p",[t._v("（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过\n三层，更多的使用类来关联每一个标签元素。")]),t._v(" "),e("p",[t._v("（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。")]),t._v(" "),e("h5",{attrs:{id:"渲染性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染性能"}},[t._v("#")]),t._v(" 渲染性能：")]),t._v(" "),e("p",[t._v("（1）慎重使用高性能属性：浮动、定位。")]),t._v(" "),e("p",[t._v("（2）尽量减少页面重排、重绘。")]),t._v(" "),e("p",[t._v("（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。")]),t._v(" "),e("p",[t._v("（4）属性值为0时，不加单位。")]),t._v(" "),e("p",[t._v("（5）属性值为浮动小数0.**，可以省略小数点之前的0。")]),t._v(" "),e("p",[t._v("（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。")]),t._v(" "),e("p",[t._v("（7）不使用@import前缀，它会影响css的加载速度。")]),t._v(" "),e("p",[t._v("（8）选择器优化嵌套，尽量避免层级过深。")]),t._v(" "),e("p",[t._v("（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清\n楚，再使用。")]),t._v(" "),e("p",[t._v("（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。")]),t._v(" "),e("p",[t._v("（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏\n览器在下载web fonts时会阻塞页面渲染损伤性能。")]),t._v(" "),e("h5",{attrs:{id:"可维护性、健壮性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可维护性、健壮性"}},[t._v("#")]),t._v(" 可维护性、健壮性：")]),t._v(" "),e("p",[t._v("（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。\n（2）样式与内容分离：将css代码定义到外部css中。")]),t._v(" "),e("h4",{attrs:{id:"flex-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex-2"}},[t._v("#")]),t._v(" flex")]),t._v(" "),e("h5",{attrs:{id:"父项常用属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父项常用属性"}},[t._v("#")]),t._v(" 父项常用属性")]),t._v(" "),e("ul",[e("li",[t._v("flex-direction：设置主轴的方向")]),t._v(" "),e("li",[t._v("justify-content：设置主轴上的子元素排列方式 flex-start flex-end center space-around space-between")]),t._v(" "),e("li",[t._v("flex-wrap：设置子元素是否换行")]),t._v(" "),e("li",[t._v("align-content：设置侧轴上的子元素的排列方式（多行）")]),t._v(" "),e("li",[t._v("align-items：设置侧轴上的子元素排列方式（单行）")]),t._v(" "),e("li",[t._v("flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap")])]),t._v(" "),e("p",[t._v("space-around：项目之间的间距为左右两侧项目到容器间距的2倍")]),t._v(" "),e("p",[t._v("space-evenly：项目两侧之间的间距与项目与容器两侧的间距相等，相当于除去项目宽度和容器和项目的两侧间距，剩下的平均分配了剩余宽度作为项目左右margin")]),t._v(" "),e("h5",{attrs:{id:"子项常见属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子项常见属性"}},[t._v("#")]),t._v(" 子项常见属性")]),t._v(" "),e("ul",[e("li",[t._v("flex(复合属性): 默认: flex: 0 1 auto;\n"),e("ul",[e("li",[t._v("flex-grow")]),t._v(" "),e("li",[t._v("flex-shrink")]),t._v(" "),e("li",[t._v("flex-basis")])])]),t._v(" "),e("li",[t._v("align-self：控制子项自己在侧轴的排列方式")]),t._v(" "),e("li",[t._v("order：定义子项的排列顺序(前后顺序), 0是第一个")])]),t._v(" "),e("p",[e("strong",[t._v("flex-grow")])]),t._v(" "),e("blockquote",[e("p",[t._v("默认0，用于决定项目在有剩余空间的情况下是否放大，默认不放大；注意，即便设置了固定宽度，也会放大。")])]),t._v(" "),e("p",[e("strong",[t._v("flex-shrink")])]),t._v(" "),e("blockquote",[e("p",[t._v("默认1，用于决定项目在空间不足时是否缩小，默认项目都是1，即空间不足时大家一起等比缩小；\n注意，即便设置了固定宽度，也会缩小。但如果某个项目flex-shrink设置为0，则即便空间不够，自身也不缩小。")])]),t._v(" "),e("p",[e("strong",[t._v("flex-basis")])]),t._v(" "),e("blockquote",[e("p",[t._v("默认auto，用于设置项目宽度，默认auto时，项目会保持默认宽度，或者以width为自身的宽度，但如果设置了flex-basis，权重会width属性高，因此会覆盖widtn属性。")])]),t._v(" "),e("h4",{attrs:{id:"transform"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transform"}},[t._v("#")]),t._v(" Transform")]),t._v(" "),e("ul",[e("li",[t._v("透视："),e("code",[t._v("perspctive")])]),t._v(" "),e("li",[t._v("3D呈现："),e("code",[t._v("transfrom-style")])]),t._v(" "),e("li",[t._v("3D 位移："),e("code",[t._v("translate3d(x, y, z)")])]),t._v(" "),e("li",[t._v("3D旋转："),e("code",[t._v("rotate3d(x, y, z)")])])]),t._v(" "),e("p",[t._v("https://juejin.im/post/6888102016007176200?utm_source=gold_browser_extension#heading-8")]),t._v(" "),e("h4",{attrs:{id:"animation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#animation"}},[t._v("#")]),t._v(" animation")]),t._v(" "),e("p",[t._v("/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 起始与结束状态 */\nanimation: name duration timing-function delay iteration-count direction fill-mode")]),t._v(" "),e("h4",{attrs:{id:"哪些些属性值会具有bfc的条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哪些些属性值会具有bfc的条件"}},[t._v("#")]),t._v(" 哪些些属性值会具有BFC的条件")]),t._v(" "),e("blockquote",[e("p",[t._v("不是所有的元素模式都能产生BFC，w3c 规范： display 属性为 block, list-item, table 的元素，会产生BFC.")])]),t._v(" "),e("p",[t._v("要给这些元素添加如下属性就可以触发BFC。")]),t._v(" "),e("ul",[e("li",[t._v("float属性不为none")]),t._v(" "),e("li",[t._v("position为absolute或fixed")]),t._v(" "),e("li",[t._v("display为inline-block, table-cell, table-caption, flex, inline-flex")]),t._v(" "),e("li",[t._v("overflow不为visible。")])]),t._v(" "),e("p",[t._v("BFC布局规则特性：")]),t._v(" "),e("ul",[e("li",[t._v("在BFC中，盒子从顶端开始垂直地一个接一个地排列")]),t._v(" "),e("li",[t._v("盒子垂直方向的距离由margin决定。"),e("strong",[t._v("属于同一个BFC的两个相邻盒子的margin会发生重叠")])]),t._v(" "),e("li",[t._v("在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。\n"),e("ul",[e("li",[t._v("BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。")]),t._v(" "),e("li",[t._v("计算BFC的高度时，自然也会检测浮动或者定位的盒子高度")])])])]),t._v(" "),e("p",[t._v("它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。")]),t._v(" "),e("h4",{attrs:{id:"硬件加速的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#硬件加速的原理"}},[t._v("#")]),t._v(" 硬件加速的原理")]),t._v(" "),e("blockquote",[e("p",[t._v("浏览器接收到页面文档后，会将文档中的标记语言解析为DOM树。DOM树和CSS结合后形成浏览器构建页面的渲染树。渲染树中包含大量的渲染元素，每个渲染元素会被分到一个图层中，\n每个图层又会被加载到GPU形成渲染纹理，而图层在GPU中transform是不会触发repaint的，最终这些使用transform的图层都会由独立的合成器进程进行处理,\nCSS transform会"),e("strong",[t._v("创建了一个新的复合图层，可以被GPU直接用来执行transform操作")]),t._v("。")])]),t._v(" "),e("p",[e("strong",[t._v("浏览器什么时候会创建一个独立的复合图层呢？事实上一般是在以下几种情况下：")])]),t._v(" "),e("ul",[e("li",[t._v("3D或者CSS transform")]),t._v(" "),e("li",[e("code",[t._v("<video>")]),t._v("和"),e("code",[t._v("<canvas>")]),t._v("标签")]),t._v(" "),e("li",[e("code",[t._v("css filters(滤镜效果)")])]),t._v(" "),e("li",[t._v("元素覆盖时，比如使用了z-index属性")])]),t._v(" "),e("h5",{attrs:{id:"为什么硬件加速会使页面流畅"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么硬件加速会使页面流畅"}},[t._v("#")]),t._v(" 为什么硬件加速会使页面流畅")]),t._v(" "),e("blockquote",[e("p",[t._v("因为transform属性不会触发浏览器的repaint（重绘），而绝对定位absolute中的left和top则会一直触发repaint（重绘）。")])]),t._v(" "),e("h5",{attrs:{id:"为什么transform没有触发repaint呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么transform没有触发repaint呢"}},[t._v("#")]),t._v(" 为什么transform没有触发repaint呢？")]),t._v(" "),e("blockquote",[e("p",[t._v("简而言之，transform动画由GPU控制，支持硬件加载，并不需要软件方面的渲染。"),e("strong",[t._v("并不是所有的CSS属性都能触发GPU的硬件加载，事实上只有少数的属性可以，比如transform、opacity、filter")])])]),t._v(" "),e("h5",{attrs:{id:"如何用css开启硬件加速"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何用css开启硬件加速"}},[t._v("#")]),t._v(" 如何用CSS开启硬件加速")]),t._v(" "),e("blockquote",[e("p",[t._v("CSS animation、transform以及transition不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行，那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。")])]),t._v(" "),e("p",[t._v("当浏览器检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素是3D变化。")]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".cube")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("translate3d")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("250px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("250px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("250px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rotate3d")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("250px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("250px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("250px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("-120deg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("scale3d")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0.5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("0.5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("0.5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n复制代码\n")])])]),e("blockquote",[e("p",[t._v("可能在一些情况下，我们并不需要对元素应用3D变幻的效果，那怎么办呢?这时候我们可以使用“欺骗”浏览器来开启硬件加速。\n虽然我们可能不想对元素应用3D变幻，可我们一样可以开启3D引擎。例如我们可以用"),e("code",[t._v("transform:translateZ(0)")]),t._v(";来开启硬件加速")])])])}),[],!1,null,null,null);n.default=s.exports}}]);