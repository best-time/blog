(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{595:function(e,s,t){"use strict";t.r(s);var a=t(12),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"换肤方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#换肤方案"}},[e._v("#")]),e._v(" 换肤方案")]),e._v(" "),t("h2",{attrs:{id:"要实现的需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#要实现的需求"}},[e._v("#")]),e._v(" 要实现的需求")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("默认有几套主题色供用户选择\n用户也可以自定义主题色\n用户选定主题后需立即生效，无需重启项目或重新打包项目\n\n核心: css var() 变量使用\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/src/theme/style.less\n\n// 默认的主题颜色\n@primaryColor: var(--primaryColor, #000);\n@primaryTextColor: var(--primaryTextColor, green);\n// 导出变量\n:export {\n  name: "less";\n  primaryColor: @primaryColor;\n  primaryTextColor: @primaryTextColor;\n}\n\nvue.config.js文件，编写配置\n\nconst path = require("path");\nmodule.exports = {\n  pluginOptions: {\n    "style-resources-loader": {\n      preProcessor: "less",\n      patterns: [\n        // 这个是加上自己的路径,不能使用(如下:alias)中配置的别名路径\n        path.resolve(__dirname, "./src/theme/style.less"),\n      ],\n    },\n  },\n};\n\n\n<style lang="less" scoped>\np {\n    color: @primaryTextColor;\n}\n</style>\n\n\n\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\n在/src/theme目录下新建model.js\n\n// 一套默认主题以及一套暗黑主题\n// 一套默认主题以及一套暗黑主题\nexport const themes = {\n  default: {\n    primaryColor: `${74}, ${144},${226}`,\n    primaryTextColor: `${74}, ${144},${226}`,\n  },\n  dark: {\n    primaryColor: `${0},${0},${0}`,\n    primaryTextColor: `${0},${0},${0}`,\n  },\n};\n\n\n\nimport { themes } from "./model";\n// 修改页面中的样式变量值\nconst changeStyle = (obj) => {\n  for (let key in obj) {\n    document\n      .getElementsByTagName("body")[0]\n      .style.setProperty(`--${key}`, obj[key]);\n  }\n  // document.documentElement.style.setProperty(\'--color-primary\', \'#aaa\')\n\n};\n// 改变主题的方法\nexport const setTheme = (themeName) => {\n  localStorage.setItem("theme", themeName); // 保存主题到本地，下次进入使用该主题\n  const themeConfig = themes[themeName];\n  // 如果有主题名称，那么则采用我们定义的主题\n  if (themeConfig) {\n    localStorage.setItem("primaryColor", themeConfig.primaryColor); // 保存主题色到本地\n    localStorage.setItem("primaryTextColor", themeConfig.primaryTextColor); // 保存文字颜色到本地\n    changeStyle(themeConfig); // 改变样式\n  } else {\n    let themeConfig = {\n      primaryColor: localStorage.getItem("primaryColor"),\n      primaryTextColor: localStorage.getItem("primaryTextColor"),\n    };\n    changeStyle(themeConfig);\n  }\n};\n\n\n')])])]),t("h2",{attrs:{id:"利用class命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用class命名空间"}},[e._v("#")]),e._v(" 利用class命名空间")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("优点：简单、容易理解，非常容易实现。\n\n缺点：需要定义class、手动维护、容易混乱\n")])])]),t("h2",{attrs:{id:"预备多套css主题-推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预备多套css主题-推荐"}},[e._v("#")]),e._v(" 预备多套CSS主题（推荐")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("优点：非常好理解，一套主题定义一套css\n\n缺点：需要手写多套css样式代码，且更换主题需要下载新的css样式代码。\n")])])]),t("h2",{attrs:{id:"动态换肤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态换肤"}},[e._v("#")]),e._v(" 动态换肤")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n原理：主要是基于element-ui换肤方案的实现，生成一套主题， 将主题配色配置写在js中，在浏览器中用js动态修改style标签覆盖原有的CSS。\n优点：通过定义函数的形式自动替换、操作性较强\n缺点：需要有统一打包出来的index.css，实现难度较高。\n")])])]),t("h2",{attrs:{id:"less在线编译实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#less在线编译实现"}},[e._v("#")]),e._v(" less在线编译实现")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("原理：使用 modifyVars()方法, 基于 less 在浏览器中的编译来实现。在引入less文件的时候需要通过link方式引入，然后基于less.js中的方法来进行修改less变量。\n特点：编译速度依赖客户端性能、切换不及时，运行时编译、需要额外引入less.main.js、样式文件通过link方式引入。\n这种方式一般不推荐\n")])])]),t("h2",{attrs:{id:"css变量换肤-推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css变量换肤-推荐"}},[e._v("#")]),e._v(" CSS变量换肤（推荐）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("优点：只需一套CSS文件；换肤不需要延迟等候；对浏览器性能要求低；可自动适配多种主题色\n\n缺点：不兼容IE\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);