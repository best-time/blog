(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{587:function(t,n,e){"use strict";e.r(n);var a=e(12),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7137195631151415333#heading-27",target:"_blank",rel:"noopener noreferrer"}},[t._v("uni-app 使用"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://www.axios-http.cn/docs/intro",target:"_blank",rel:"noopener noreferrer"}},[t._v("axios文档"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://juejin.cn/post/6844904032826294286",target:"_blank",rel:"noopener noreferrer"}},[t._v("开发过程常用模式"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://juejin.cn/post/7137058832592666655#heading-6",target:"_blank",rel:"noopener noreferrer"}},[t._v("性能优化"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://juejin.cn/post/6844903843092758541#heading-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("api数据缓存"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"http://www.godbasin.com/vue-ebook/vue-ebook/0.html#%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%9A%84%E5%87%BA%E7%8E%B0-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端发展"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844904130163507214",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端监控和埋点"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"env文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#env文件"}},[t._v("#")]),t._v(" env文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('.env: 全局默认配置文件，所有环境(开发、测试、生成等）均会加载并合并该文件。\n\n.env.development: 开发环境的配置文件\n\n.env.production: 生产环境的配置文件\n\n\n注\n\n1. 以上三个文件的命名为固定格式，不能改变，否则读取不到文件。\n\n2. .env文件在实际开发中可以省略，如果所有配置都写在对应的文件中。\n\n自定义模式:\n\n// .env.staging\n"build:stage": "vue-cli-service build --mode staging",\n\n// .env.demo1024\n"build:demo1024": "vue-cli-service build --mode demo1024",\n')])])]),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844904122747977741#heading-31",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端性能优化"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6993686386389827592",target:"_blank",rel:"noopener noreferrer"}},[t._v("大文件上传"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://juejin.cn/post/6951281282881945631",target:"_blank",rel:"noopener noreferrer"}},[t._v("2"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://juejin.cn/post/6844903688536850445",target:"_blank",rel:"noopener noreferrer"}},[t._v("3"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://juejin.cn/post/7110121072032219166",target:"_blank",rel:"noopener noreferrer"}},[t._v("4"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"vue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" Vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("v-model 使用技巧\nhttps://segmentfault.com/a/1190000040863402\n图形验证码\n\thttps://juejin.cn/post/6919710203520745486?utm_source=gold_browser_extension\nnexttick\n\thttps://juejin.cn/post/6844903914068787213\n面试题\nhttps://juejin.cn/post/6850037277675454478\n面试\nhttps://juejin.cn/post/6844903928442667015\n源码解析\nhttps://juejin.cn/column/6969563635194527758\n")])])]),e("p",[e("a",{attrs:{href:"https://www.toutiao.com/article/7182733836940214818/",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue3 资源"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://www.toutiao.com/article/7175490648194302497/",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue3项目"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://kingbultsea.github.io/vue3-analysis/book/",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue源码"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/biaochenxuying/vue-family-mindmap",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue结构图"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://ustbhuangyi.github.io/vue-analysis/",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue2.5源码"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.toutiao.com/article/7182733836940214818/?log_from=c3bb980ff7c1a_1675864780939",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue+react源码解析项目"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"js-获取css变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-获取css变量"}},[t._v("#")]),t._v(" js 获取css变量")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\njs 获取 css 变量\n\n\t// 获取一个 Dom 节点上的 CSS 变量\n\telement.style.getPropertyValue("--my-var");\n\n\t// 获取任意 Dom 节点上的 CSS 变量\n\tgetComputedStyle(element).getPropertyValue("--my-var");\n\n\t// 修改一个 Dom 节点上的 CSS 变量\n\telement.style.setProperty("--my-var", jsVar + 4);\n\n')])])]),e("h2",{attrs:{id:"async-defer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-defer"}},[t._v("#")]),t._v(" Async defer")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("如果 script 无 src 属性，则 defer, async 会被忽略\n\t动态添加的 script 标签隐含 async 属性。\n\t结论:\n\t两者都不会阻止 document 的解析\n\tdefer 会在 DOMContentLoaded 前依次执行 （可以利用这两点哦！）\n\tasync 则是下载完立即执行，不一定是在 DOMContentLoaded 前\n\tasync 因为顺序无关，所以很适合像 Google Analytics 这样的无依赖脚本\n")])])]),e("h2",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git message 前缀\n\tbuild：表示构建，发布版本可用这个\n\tci：更新 CI/CD 等自动化配置\n\tchore：杂项，其他更改\n\tdocs：更新文档\n\tfeat：常用，表示新增功能\n\tfix：常用：表示修复 bug\n\tperf：性能优化\n\trefactor：重构\n\trevert：代码回滚\n\tstyle：样式更改\n\ttest：单元测试更改\n")])])]),e("h2",{attrs:{id:"npm-发包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-发包"}},[t._v("#")]),t._v(" Npm 发包")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nnpm 发包\n\tmkdir [name]\n\tcd [name]\n\tnpm init -y\n\tnpm version [patch/minor/major]\n\tnpm login\n\tnpm publish\n\tnpm unpublish npm-component@1.0.1   72小时之内可以删除\n")])])]),e("h2",{attrs:{id:"跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nhttps://juejin.cn/post/6844903767226351623\n当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域\n协议和端口造成的跨域问题“前台”是无能为力的\n在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。\n“URL的首部”可以理解为“协议, 域名和端口必须匹配\n\nhttp:// www . abc.com : 8080 / scripts/jquery.js\n协议    子域名   主域名    端口号   请求资源地址\n\n同源策略限制内容有：\nCookie、LocalStorage、IndexedDB 等存储性内容\nDOM 节点\nAJAX 请求发送后，结果被浏览器拦截了\n\n有三个标签是允许跨域加载资源：\n<img src=XXX>\n<link href=XXX>\n<script src=XXX>\n\n总结:\nCORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案\nJSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。\n不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。\n日常工作中，用得比较多的跨域方案是cors和nginx反向代理\n\n\n")])])]),e("h4",{attrs:{id:"jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" jsonp")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n需要对方服务器做支持\n// index.html\nfunction jsonp({ url, params, callback }) {\n  return new Promise((resolve, reject) => {\n    let script = document.createElement('script')\n    window[callback] = function(data) {\n      resolve(data)\n      document.body.removeChild(script)\n    }\n    params = { ...params, callback } // wd=b&callback=show\n    let arrs = []\n    for (let key in params) {\n      arrs.push(`${key}=${params[key]}`)\n    }\n    script.src = `${url}?${arrs.join('&')}`\n    document.body.appendChild(script)\n  })\n}\njsonp({\n  url: 'http://localhost:3000/say',\n  params: { wd: 'Iloveyou' },\n  callback: 'show'\n}).then(data => {\n  console.log(data)\n})\n上面这段代码相当于向http://localhost:3000/say?wd=Iloveyou&callback=show这个地址请求数据，然后后台返回show('我不爱你')，最后会运行show()这个函数，打印出'我不爱你'\n// server.js\nlet express = require('express')\nlet app = express()\napp.get('/say', function(req, res) {\n  let { wd, callback } = req.query\n  console.log(wd) // Iloveyou\n  console.log(callback) // show\n  res.end(`${callback}('我不爱你')`)\n})\napp.listen(3000)\n\n  1) JSONP和AJAX对比\n  JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。\n  但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）\n\n  2) JSONP优缺点\n  JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。\n\n\n")])])]),e("h4",{attrs:{id:"cors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" cors")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nCORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。\n服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。\n该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。\n\n分别为简单请求和复杂请求\n1) 简单请求\n  只要同时满足以下两大条件，就属于简单请求\n  条件1：使用下列方法之一：\n\n  GET\n  HEAD\n  POST\n\n  条件2：Content-Type 的值仅限于下列三者之一：\n\n  text/plain\n  multipart/form-data\n  application/x-www-form-urlencoded\n\n2) 复杂请求\n\n不符合以上条件的请求就肯定是复杂请求了。 复杂请求的CORS请求，会在正式通信之前，\n增加一次HTTP查询请求，称为\"预检\"请求,该请求是 option 方法的，\n通过该请求来知道服务端是否允许跨域请求。\n后台配置\n// 允许哪个方法访问我\nres.setHeader('Access-Control-Allow-Methods', 'PUT')\n// 预检的存活时间\nres.setHeader('Access-Control-Max-Age', 6)\n// OPTIONS请求不做任何处理\nif (req.method === 'OPTIONS') {\n  res.end()\n}\n// 定义后台返回的内容\napp.put('/getData', function(req, res) {\n  console.log(req.headers)\n  res.end('我不爱你')\n})\n\n")])])]),e("h4",{attrs:{id:"postmessage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#postmessage"}},[t._v("#")]),t._v(" postMessage()")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('otherWindow.postMessage(message, targetOrigin, [transfer]);\nmessage: 将要发送到其他 window的数据。\ntargetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，\n其值可以是字符串"*"（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、\n主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；\n只有三者完全匹配，消息才会被发送。\ntransfer(可选)：是一串和message 同时传递的 Transferable 对象.\n这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。\n\n\nhttp://localhost:3000/a.html页面向http://localhost:4000/b.html传递“我爱你”,然后后者传回"我不爱你"\n\n\n// a.html\n  <iframe src="http://localhost:4000/b.html" frameborder="0"\n  id="frame" onload="load()"></iframe> //等它加载完触发一个事件\n\n  //内嵌在http://localhost:3000/a.html\n\n    <script>\n      function load() {\n        let frame = document.getElementById(\'frame\')\n        frame.contentWindow.postMessage(\'我爱你\', \'http://localhost:4000\') //发送数据\n        window.onmessage = function(e) { //接受返回数据\n          console.log(e.data) //我不爱你\n        }\n      }\n    <\/script>\n\n\n// b.html\n  window.onmessage = function(e) {\n    console.log(e.data) //我爱你\n    e.source.postMessage(\'我不爱你\', e.origin)\n }\n\n\n')])])]),e("h4",{attrs:{id:"websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" websocket")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("本地文件socket.html向localhost:3000发生数据和接受数据\n\n// socket.html\n<script>\n    let socket = new WebSocket('ws://localhost:3000');\n    socket.onopen = function () {\n      socket.send('我爱你');//向服务器发送数据\n    }\n    socket.onmessage = function (e) {\n      console.log(e.data);//接收服务器返回的数据\n    }\n<\/script>\n\n\n// server.js\nlet express = require('express');\nlet app = express();\nlet WebSocket = require('ws');//记得安装ws\nlet wss = new WebSocket.Server({port:3000});\nwss.on('connection',function(ws) {\n  ws.on('message', function (data) {\n    console.log(data);\n    ws.send('我不爱你')\n  });\n})\n\n\n")])])]),e("h4",{attrs:{id:"node中间件代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node中间件代理"}},[t._v("#")]),t._v(" node中间件代理")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。\n代理服务器，需要做以下几个步骤：\n\n接受客户端请求 。\n将请求 转发给服务器。\n拿到服务器 响应 数据。\n将 响应 转发给客户端。\n")])])]),e("h4",{attrs:{id:"nginx-反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx-反向代理"}},[t._v("#")]),t._v(" nginx 反向代理")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("实现原理类似于Node中间件代理，需要你搭建一个中转nginx服务器，用于转发请求。\n使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。\n实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。\n\n// proxy服务器\nserver {\n    listen       81;\n    server_name  www.domain1.com;\n    location / {\n        proxy_pass   http://www.domain2.com:8080;  #反向代理\n        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名\n        index  index.html index.htm;\n\n        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用\n        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*\n        add_header Access-Control-Allow-Credentials true;\n    }\n}\n\n\n// index.html\nvar xhr = new XMLHttpRequest();\n// 前端开关：浏览器是否读写cookie\nxhr.withCredentials = true;\n// 访问nginx中的代理服务器\nxhr.open('get', 'http://www.domain1.com:81/?user=admin', true);\nxhr.send();\n\n// server.js\nvar http = require('http');\nvar server = http.createServer();\nvar qs = require('querystring');\nserver.on('request', function(req, res) {\n    var params = qs.parse(req.url.substring(2));\n    // 向前台写cookie\n    res.writeHead(200, {\n        'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'   // HttpOnly:脚本无法读取\n    });\n    res.write(JSON.stringify(params));\n    res.end();\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n\n\n\n")])])]),e("h4",{attrs:{id:"window-name-iframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window-name-iframe"}},[t._v("#")]),t._v(" window.name + iframe")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，\n并且可以支持非常长的 name 值（2MB）\n // a.html(http://localhost:3000/b.html)\n  <iframe src="http://localhost:4000/c.html" frameborder="0" onload="load()" id="iframe"></iframe>\n  <script>\n    let first = true\n    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n    function load() {\n      if(first){\n      // 第1次onload(跨域页)成功后，切换到同域代理页面\n        let iframe = document.getElementById(\'iframe\');\n        iframe.src = \'http://localhost:3000/b.html\';\n        first = false;\n      }else{\n      // 第2次onload(同域b.html页)成功后，读取同域window.name中数据\n        console.log(iframe.contentWindow.name);\n      }\n    }\n  <\/script>\n\n // c.html(http://localhost:4000/c.html)\n  <script>\n    window.name = \'我不爱你\'\n  <\/script>\n\n\n')])])]),e("h4",{attrs:{id:"location-hash-iframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#location-hash-iframe"}},[t._v("#")]),t._v(" location.hash + iframe")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。\n三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。\n\n\n一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。\n同样的，a.html和b.html是同域的，都是http://localhost:3000;而c.html是http://localhost:4000\n\n // a.html\n  <iframe src=\"http://localhost:4000/c.html#iloveyou\"></iframe>\n  <script>\n    window.onhashchange = function () { //检测hash的变化\n      console.log(location.hash);\n    }\n  <\/script>\n\n // b.html\n  <script>\n    window.parent.parent.location.hash = location.hash\n    //b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面\n  <\/script>\n\n // c.html\n console.log(location.hash);\n  let iframe = document.createElement('iframe');\n  iframe.src = 'http://localhost:3000/b.html#idontloveyou';\n  document.body.appendChild(iframe);\n\n\n")])])]),e("h4",{attrs:{id:"document-domain-iframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#document-domain-iframe"}},[t._v("#")]),t._v(" document.domain + iframe")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。 只需要给页面添加 document.domain =\'test.com\' 表示二级域名都相同就可以实现跨域\n\n// a.html\n<body>\n helloa\n  <iframe src="http://b.zf1.cn:3000/b.html" frameborder="0" onload="load()" id="frame"></iframe>\n  <script>\n    document.domain = \'zf1.cn\'\n    function load() {\n      console.log(frame.contentWindow.a);\n    }\n  <\/script>\n</body>\n\n// b.html\n<body>\n   hellob\n   <script>\n     document.domain = \'zf1.cn\'\n     var a = 100;\n   <\/script>\n</body>\n\n\n')])])]),e("h2",{attrs:{id:"微信小程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序"}},[t._v("#")]),t._v(" 微信小程序")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n\thttps://juejin.cn/post/7034435052817776676?utm_source=gold_browser_extension\n\thttps://juejin.cn/post/6961317489225498631\n")])])]),e("h2",{attrs:{id:"权限系统设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#权限系统设计"}},[t._v("#")]),t._v(" 权限系统设计")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\thttps://juejin.cn/post/7019651859560267807?utm_source=gold_browser_extension\n\n")])])]),e("h2",{attrs:{id:"http"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" http")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" \thttps://juejin.cn/post/7052224696867094536?utm_source=gold_browser_extension\n\n")])])]),e("h2",{attrs:{id:"css-开发总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-开发总结"}},[t._v("#")]),t._v(" Css 开发总结")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://juejin.cn/post/6844904066301050893\nhttps://juejin.cn/post/7045872960166428685?utm_source=gold_browser_extension\n\n")])])]),e("h2",{attrs:{id:"浏览器输入url"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器输入url"}},[t._v("#")]),t._v(" 浏览器输入url")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\thttps://juejin.cn/post/6986416221323264030?utm_source=gold_browser_extension\n\n")])])]),e("h2",{attrs:{id:"h5性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#h5性能优化"}},[t._v("#")]),t._v(" h5性能优化")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\thttps://juejin.cn/post/6994383328182796295?utm_source=gold_browser_extension\n\n")])])]),e("h4",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" promise")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://juejin.cn/post/6844903607968481287\n")])])]),e("h2",{attrs:{id:"手写代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手写代码"}},[t._v("#")]),t._v(" 手写代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://juejin.cn/post/6844903809206976520\nhttps://juejin.cn/post/6844903856489365518#heading-23\nmvvm\nhttps://juejin.cn/post/6844903605414133773\n\n数组对象去重\n递归实现\n双层循环 冒泡排序\n\t- 如何跳出  return  break name\n")])])]),e("h2",{attrs:{id:"基础知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://juejin.cn/post/7022795467821940773\n")])])]),e("h2",{attrs:{id:"导出excel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导出excel"}},[t._v("#")]),t._v(" 导出excel")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n\thttps://github.com/zhaoyunchong/jsonToExcel\n\thttps://www.cnblogs.com/mooncher/p/13265438.html\n")])])]),e("h2",{attrs:{id:"css-回流重绘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-回流重绘"}},[t._v("#")]),t._v(" css 回流重绘")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("GPU 加速的本质其实是减少浏览器渲染页面每一帧过程中的 reflow 和 repaint，\n其根本，就是让需要进行动画的元素，生成自己的 GraphicsLayer。\n在 Chrome 中，存在有不同类型的层：RenderLayer(负责 DOM 子树)，GraphicsLayer(负责 RenderLayer 的子树)\n\n\nCSS 动画（Web 动画同理）优化的第一条准则就是让需要动画的元素生成了自己独立的 GraphicsLayer，\n强制开始 GPU 加速，而我们需要知道是，GPU 加速的本质是利用让元素生成了自己独立的 GraphicsLayer，\n降低了页面在渲染过程中重绘重排的开销\n\n\n生成自己的独立的 GraphicsLayer，不仅仅只有 transform3d api，还有非常多的方式。在 CSS 中，\n包括但不限于（找了很多文档，没有很全面的，需要一个一个去尝试，通过开启 Chrome 的 Layer border 选项）：\n\t3D 或透视变换(perspective、transform) CSS 属性\n\t使用加速视频解码的\n\t拥有 3D (WebGL) 上下文或加速的 2D 上下文的 元素\n\t混合插件(如 Flash)\n\t对自己的 opacity 做 CSS 动画或使用一个动画变换的元素\n\t拥有加速 CSS 过滤器的元素\n\t元素有一个包含复合层的后代节点(换句话说，就是一个元素拥有一个子元素，该子元素在自己的层里)\n\t元素有一个 z-index 较低且包含一个复合层的兄弟元素(换句话说就是该元素在复合层上面渲染)\n\n\n减少使用耗性能样式\n\tbox-shadow\n\tCSS 3D 变换、mix-blend-mode、filter\n\n使用 will-change 提高页面滚动、动画等渲染性能\n\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("全局路由钩子函数有：beforeEach、beforeResolve、afterEach（参数中没有next）\n组件内路由的钩子函数有：beforeRouterEnter、beforeRouteUpdate、beforeRouteLeave\n路由独享的钩子函数有：beforeEnter\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("OSI分层：应用层、表示层、会话层、传输层、网络层、数据链路层、物理层\n\nTCP/IP模型：应用层、传输层、网络层、网络接口层\n\n应用层协议(常用)：HTTP、RTSP、FTP\n\n传输层协议：TCP、UDP\n\n\n\n2、tcp/udp属于哪一层？\n传输层\n3、tcp/udp有哪些优缺点？\n(1)tcp是面向连接的，udp是面向无连接的\ntcp在通信之前必须通过三次握手机制与对方建立连接，而udp通信不必与对方建立连接，不管对方的状态就直接把数据发送给对方\n(2)tcp连接过程耗时，udp不耗时\n(3)tcp连接过程中出现的延时增加了被攻击的可能，安全性不高，而udp不需要连接，安全性较高\n(4)tcp是可靠的，保证数据传输的正确性，不易丢包，udp是不可靠的，易丢包\ntcp可靠的四大手段：\n顺序编号：tcp在传输文件的时候，会将文件拆分为多个tcp数据包，每个装满的数据包大小大约在1k左右，tcp协议为保证可靠传输，会将这些数据包顺序编号\n确认机制：当数据包成功的被发送方发送给接收方，接收方会根据tcp协议反馈给发送方一个成功接收的ACK信号，信号中包含了当前包的序号\n超时重传：当发送方发送数据包给接收方时，会为每一个数据包设置一个定时器，当在设定的时间内，发送方仍没有收到接收方的ACK信号，会再次发送该数据包，直到收到接收方的ACK信号或者连接已断开\n校验信息：tcp首部校验信息较多，udp首部校验信息较少\n(5)tcp传输速率较慢，实时性差，udp传输速率较快\ntcp建立连接需要耗时，并且tcp首部信息太多，每次传输的有用信息较少，实时性差\n(6)tcp是流模式，udp是数据包模式\ntcp只要不超过缓冲区的大小就可以连续发送数据到缓冲区上，接收端只要缓冲区上有数据就可以读取，可以一次读取多个数据包，而udp一次只能读取一个数据包，数据包之间独立\n4、tcp/udp的使用场合？\n(1)对数据可靠性的要求。tcp适用于可靠性高的场合，udp适用于可靠性低的场合\n(2)应用的实时性。tcp有延时较大，udp延时较小\n(3)网络的可靠性。网络不好的情况下使用tcp，网络条件好的情况下，使用udp\n5、PPP协议属于哪一层协议？\n数据链路层\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("从浏览器地址栏输入url到显示页面的步骤\n详细版本\n\n\n在浏览器地址栏输入URL\n\n\n浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤\n\n\n如果资源未缓存，发起新请求\n\n\n如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。\n\n\n检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control：\n\nHTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期\nHTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间\n\n\n\n\n\n浏览器解析URL获取协议，主机，端口，path\n\n\n浏览器组装一个HTTP（GET）请求报文\n\n\n浏览器获取主机ip地址，过程如下：\n\n浏览器缓存\n本机缓存\nhosts文件\n路由器缓存\nISP DNS缓存\nDNS递归查询（可能存在负载均衡导致每次IP不一样）\n\n\n\n打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：\n\n客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口\n服务器发回SYN=1， ACK=X+1， Seq=Y的响应包\n客户端发送ACK=Y+1， Seq=Z\n\n\n\nTCP链接建立后发送HTTP请求\n\n\n服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序\n\n\n服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码\n\n\n处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作\n\n\n服务器将响应报文通过TCP连接发送回浏览器\n\n\n浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：\n\n\n1.  主动方发送Fin=1， Ack=Z， Seq= X报文\n1.  被动方发送ACK=X+1， Seq=Z报文\n1.  被动方发送Fin=1， ACK=X， Seq=Y报文\n1.  主动方发送ACK=Y， Seq=X报文\n复制代码\n\n\n浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同\n\n\n如果资源可缓存，进行缓存\n\n\n对响应进行解码（例如gzip压缩）\n\n\n根据资源类型决定如何处理（假设资源为HTML文档）\n\n\n解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释\n\n\n构建DOM树：\n\n\n1.  Tokenizing：根据HTML规范将字符流解析为标记\n1.  Lexing：词法分析将标记转换为对象并定义属性和规则\n1.  DOM construction：根据HTML标记关系将对象组成DOM树\n复制代码\n\n\n解析过程中遇到图片、样式表、js文件，启动下载\n\n\n构建CSSOM树：\n\n\n1.  Tokenizing：字符流转换为标记流\n1.  Node：根据标记创建节点\n1.  CSSOM：节点创建CSSOM树\n复制代码\n\n根据DOM树和CSSOM树构建渲染树:\n\n1.  从DOM树的根节点遍历所有可见节点，不可见节点包括：1）`script`,`meta`这样本身不可见的标签。2)被css隐藏的节点，如`display: none`\n1.  对每一个可见节点，找到恰当的CSSOM规则并应用\n1.  发布可视节点的内容和计算样式\n复制代码\n\njs解析如下：\n\n1.  浏览器创建`Document`对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时`document.readystate`为`loading`\n1.  HTML解析器遇到没有`async`和`defer`的`script`时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用`document.write()`把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作`script`和他们之前的文档内容\n1.  当解析器遇到设置了`async`属性的`script`时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用`document.write()`，它们可以访问自己`script`和之前的文档元素\n1.  当文档完成解析，`document.readState`变成`interactive`\n1.  所有`defer`脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用`document.write()`\n1.  浏览器在`Document`对象上触发`DOMContentLoaded`事件\n1.  此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，`document.readState`变为`complete`,`window`触发`load`事件\n复制代码\n\n显示页面（HTML解析过程中会逐步显示页面）\n\n")])])]),e("h4",{attrs:{id:"切换主题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#切换主题"}},[t._v("#")]),t._v(" 切换主题")]),t._v(" "),e("ol",[e("li",[t._v("自定义样式适配")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\x3c!-- html 节点添加主题自定义属性 --\x3e\n<html data-theme=\"light\">\n  \x3c!-- 使用CSS变量控制样式 --\x3e\n\t<body style=\"background: var(--body-background)\"></body>\n</html>\n\n\n// 跟主题无关的变量放到root里\n:root {\n    --border-radius-base: 6px;\n}\n\n// 跟主题相关变量，通过属性选择器提升优先级\nhtml[data-theme='default']:root {\n    --body-background: #efefef;\n}\n\nhtml[data-theme='dark']:root {\n    --body-background: #000;\n}\n\n\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[t._v("ui库适配")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<html data-theme=\"light\"></html>\n\nhtml[data-theme='light'] .ant-button {color: #fff}\nhtml[data-theme='dark'] .ant-button {color: #000}\n\n\n")])])])]),t._v(" "),e("li",[e("p",[t._v("动态切换")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('页面切换主题具体需要从下面三个维度来考虑：\n\n系统主题更换\n页面提供主题切换按钮，用户主动切换\n通过URL控制当前主题\n\nbody {\n  background: var(--body-background);\n  transition: background 0.3s;\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    --body-background: #efefef;\n    --text-color: #333;\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --body-background: #000;\n    --text-color: #ededed;\n  }\n}\n\n\n# 跟随主题\n// 给HTML DOM节点添加自定义主题，标识当前主题\nconst toggleTheme = (isDarkMode) => {\n\tconst htmlEl = document.documentElement;\n  htmlEl.setAttribute("data-theme", isDarkMode ? "dark" : "light");\n};\n\nconst themeMedia = window.matchMedia("(prefers-color-scheme: dark)");\n\n// 页面初始化切换\ntoggleTheme(themeMedia.matches);\n\n// 监听系统切换\nthemeMedia.addListener((e) => {\n  toggleTheme(e.matches);\n});\n\n\n# 按钮切换\nconst buttonEl = document.getElementById("btn");\n\nbuttonEl.addEventListener("click", () => {\n  const currentTheme = htmlEl.getAttribute("data-theme");\n  const nextTheme = currentTheme === "dark" ? "light" : "dark";\n\n  htmlEl.setAttribute("data-theme", nextTheme);\n});\n\n# url 切换\n\nconst search = new URLSearchParams(location.search);\nconst theme = search.get("theme") || "light";\n\ndocument.documentElement.setAttribute("data-theme", theme);\n\n\n\n')])])])])]),t._v(" "),e("h4",{attrs:{id:"vue-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-2"}},[t._v("#")]),t._v(" Vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("v-model 使用技巧\nhttps://segmentfault.com/a/1190000040863402\n图形验证码\n\thttps://juejin.cn/post/6919710203520745486?utm_source=gold_browser_extension\nnexttick\n\thttps://juejin.cn/post/6844903914068787213\n面试题\nhttps://juejin.cn/post/6850037277675454478\n面试\nhttps://juejin.cn/post/6844903928442667015\n源码解析\nhttps://juejin.cn/column/6969563635194527758\n")])])]),e("h4",{attrs:{id:"js-获取css变量-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-获取css变量-2"}},[t._v("#")]),t._v(" js 获取css变量")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\njs 获取 css 变量\n\n\t// 获取一个 Dom 节点上的 CSS 变量\n\telement.style.getPropertyValue("--my-var");\n\n\t// 获取任意 Dom 节点上的 CSS 变量\n\tgetComputedStyle(element).getPropertyValue("--my-var");\n\n\t// 修改一个 Dom 节点上的 CSS 变量\n\telement.style.setProperty("--my-var", jsVar + 4);\n\n')])])]),e("h4",{attrs:{id:"async-defer-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-defer-2"}},[t._v("#")]),t._v(" Async defer")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("如果 script 无 src 属性，则 defer, async 会被忽略\n\t动态添加的 script 标签隐含 async 属性。\n\t结论:\n\t两者都不会阻止 document 的解析\n\tdefer 会在 DOMContentLoaded 前依次执行 （可以利用这两点哦！）\n\tasync 则是下载完立即执行，不一定是在 DOMContentLoaded 前\n\tasync 因为顺序无关，所以很适合像 Google Analytics 这样的无依赖脚本\n")])])]),e("h4",{attrs:{id:"git-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-2"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git message 前缀\n\tbuild：表示构建，发布版本可用这个\n\tci：更新 CI/CD 等自动化配置\n\tchore：杂项，其他更改\n\tdocs：更新文档\n\tfeat：常用，表示新增功能\n\tfix：常用：表示修复 bug\n\tperf：性能优化\n\trefactor：重构\n\trevert：代码回滚\n\tstyle：样式更改\n\ttest：单元测试更改\n")])])]),e("h4",{attrs:{id:"npm-发包-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-发包-2"}},[t._v("#")]),t._v(" Npm 发包")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nnpm 发包\n\tmkdir [name]\n\tcd [name]\n\tnpm init -y\n\tnpm version [patch/minor/major]\n\tnpm login\n\tnpm publish\n\tnpm unpublish npm-component@1.0.1   72小时之内可以删除\n")])])]),e("h4",{attrs:{id:"跨域-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域-2"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nhttps://juejin.cn/post/6844903767226351623\n当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域\n\n协议和端口造成的跨域问题“前台”是无能为力的\n\n在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。\n“URL的首部”可以理解为“协议, 域名和端口必须匹配\n\nhttp:// www . abc.com : 8080 / scripts/jquery.js\n协议    子域名   主域名    端口号   请求资源地址\n\n同源策略限制内容有：\nCookie、LocalStorage、IndexedDB 等存储性内容\nDOM 节点\nAJAX 请求发送后，结果被浏览器拦截了\n\n有三个标签是允许跨域加载资源：\n<img src=XXX>\n<link href=XXX>\n<script src=XXX>\n\n1. jsonp\n需要对方服务器做支持\n// index.html\nfunction jsonp({ url, params, callback }) {\n  return new Promise((resolve, reject) => {\n    let script = document.createElement('script')\n    window[callback] = function(data) {\n      resolve(data)\n      document.body.removeChild(script)\n    }\n    params = { ...params, callback } // wd=b&callback=show\n    let arrs = []\n    for (let key in params) {\n      arrs.push(`${key}=${params[key]}`)\n    }\n    script.src = `${url}?${arrs.join('&')}`\n    document.body.appendChild(script)\n  })\n}\njsonp({\n  url: 'http://localhost:3000/say',\n  params: { wd: 'Iloveyou' },\n  callback: 'show'\n}).then(data => {\n  console.log(data)\n})\n上面这段代码相当于向http://localhost:3000/say?wd=Iloveyou&callback=show这个地址请求数据，然后后台返回show('我不爱你')，最后会运行show()这个函数，打印出'我不爱你'\n// server.js\nlet express = require('express')\nlet app = express()\napp.get('/say', function(req, res) {\n  let { wd, callback } = req.query\n  console.log(wd) // Iloveyou\n  console.log(callback) // show\n  res.end(`${callback}('我不爱你')`)\n})\napp.listen(3000)\n\n  1) JSONP和AJAX对比\n  JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。\n  但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）\n\n  2) JSONP优缺点\n  JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。\n\n2.cors\n\nCORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。\n服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。\n该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。\n\n分别为简单请求和复杂请求\n1) 简单请求\n  只要同时满足以下两大条件，就属于简单请求\n  条件1：使用下列方法之一：\n\n  GET\n  HEAD\n  POST\n\n  条件2：Content-Type 的值仅限于下列三者之一：\n\n  text/plain\n  multipart/form-data\n  application/x-www-form-urlencoded\n\n2) 复杂请求\n\n不符合以上条件的请求就肯定是复杂请求了。 复杂请求的CORS请求，会在正式通信之前，\n增加一次HTTP查询请求，称为\"预检\"请求,该请求是 options 方法的，\n通过该请求来知道服务端是否允许跨域请求。\n后台配置\n// 允许哪个方法访问我\nres.setHeader('Access-Control-Allow-Methods', 'PUT')\n// 预检的存活时间\nres.setHeader('Access-Control-Max-Age', 6)\n// OPTIONS请求不做任何处理\nif (req.method === 'OPTIONS') {\n  res.end()\n}\n// 定义后台返回的内容\napp.put('/getData', function(req, res) {\n  console.log(req.headers)\n  res.end('我不爱你')\n})\n\n\n\n")])])]),e("h4",{attrs:{id:"微信小程序-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序-2"}},[t._v("#")]),t._v(" 微信小程序")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n\thttps://juejin.cn/post/7034435052817776676?utm_source=gold_browser_extension\n\thttps://juejin.cn/post/6961317489225498631\n")])])]),e("h4",{attrs:{id:"权限系统设计-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#权限系统设计-2"}},[t._v("#")]),t._v(" 权限系统设计")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\thttps://juejin.cn/post/7019651859560267807?utm_source=gold_browser_extension\n\n")])])]),e("h4",{attrs:{id:"http-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" http")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" \thttps://juejin.cn/post/7052224696867094536?utm_source=gold_browser_extension\n\n")])])]),e("h4",{attrs:{id:"css-开发总结-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-开发总结-2"}},[t._v("#")]),t._v(" Css 开发总结")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://juejin.cn/post/6844904066301050893\nhttps://juejin.cn/post/7045872960166428685?utm_source=gold_browser_extension\n\n")])])]),e("h4",{attrs:{id:"浏览器输入url-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器输入url-2"}},[t._v("#")]),t._v(" 浏览器输入url")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\thttps://juejin.cn/post/6986416221323264030?utm_source=gold_browser_extension\n\n")])])]),e("h4",{attrs:{id:"h5性能优化-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#h5性能优化-2"}},[t._v("#")]),t._v(" h5性能优化")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\thttps://juejin.cn/post/6994383328182796295?utm_source=gold_browser_extension\n\n")])])]),e("h4",{attrs:{id:"promise-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-2"}},[t._v("#")]),t._v(" promise")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://juejin.cn/post/6844903607968481287\n")])])]),e("h4",{attrs:{id:"手写代码-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手写代码-2"}},[t._v("#")]),t._v(" 手写代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://juejin.cn/post/6844903809206976520\nhttps://juejin.cn/post/6844903856489365518#heading-23\nmvvm\nhttps://juejin.cn/post/6844903605414133773\n\n数组对象去重\n递归实现\n双层循环 冒泡排序\n\t- 如何跳出  return  break name\n")])])]),e("h4",{attrs:{id:"基础知识-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础知识-2"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://juejin.cn/post/7022795467821940773\n")])])]),e("h4",{attrs:{id:"导出excel-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导出excel-2"}},[t._v("#")]),t._v(" 导出excel")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n\thttps://github.com/zhaoyunchong/jsonToExcel\n\thttps://www.cnblogs.com/mooncher/p/13265438.html\n")])])]),e("h2",{attrs:{id:"git-rebase"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// https://blog.csdn.net/weixin_42310154/article/details/119004977\n!!不要通过rebase对任何已经提交到公共仓库中的commit进行修改（你自己一个人玩的分支除外）\n\n基于develop分支执行: git rebase master\ndevelop: 待变基分支 当前分支\nmaster: 基分支 目标分支\n\n当执行rebase操作时，git会从两个分支的共同祖先开始提取待变基分支上的修改，\n然后将待变基分支指向基分支的最新提交，最后将刚才提取的修改应用到基分支的最新提交的后面。\n\n合并当前分支的多个提交记录:\ngit rebase -i [startPonit] [endPoint]\n              HEAD~N   N为我们需要合并的 commit 记录的数量\n\n  前开后闭 区间 这里的 [startPonit] 是指需要合并的commit的前一个commit (即当前示例中的 “4cb600e: feat: modify a”)。\n  因为, 三个commit肯定要基于上一个commit合并成了新的commit。\n  谨慎使用[endPoint] 省略, 即默认表示从起始commit一直到最后一个，但是一旦你填写了,\n  则表示 [endPoint]后面的commit全部不要了!\n\n  pick 改成 s\n  注释不必要的提交信息\n\n  pick：保留该commit（缩写:p）\n  reword：保留该commit，但我需要修改该commit的注释（缩写:r）\n  edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）\n  squash：将该commit和前一个commit合并（缩写:s）\n  fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）\n  exec：执行shell命令（缩写:x）\n  drop：我要丢弃该commit（缩写:d）\n\n\n分支合并\ngit rebase [分支名]\n\n\n  总的原则是，只对尚未推送或未分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式（rebase 和merge）带来的便利。\n\n\n(将一段commit粘贴到另一个分支上) (如果只是复制某一两个提交到其他分支，建议使用更简单的命令:git cherry-pick)\n    git rebase   [startpoint]   [endpoint]  --onto  [branchName]\nex:\n    git  rebase   90bc0045b^   5de0da9f2   --onto master\n    这时候 master 没有任何变化\n    git checkout master\n    git reset --hard  0c72e64\n    将master指向所提交的id\n")])])]),e("h2",{attrs:{id:"屏幕宽高获取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#屏幕宽高获取"}},[t._v("#")]),t._v(" 屏幕宽高获取")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\nthis.$el.offsetWidth\nwindow.pageYOffset\nwindow.pageXOffset\nthis.$el.getBoundingClientRect()\n\n\n\n窗口相对于屏幕顶部距离 window.screenTop\n窗口相对于屏幕左边距离 window.screenLeft,\n屏幕分辨率的高 window.screen.height,\n屏幕分辨率的宽 window.screen.width,\n屏幕可用工作区高度 window.screen.availHeight,\n屏幕可用工作区宽度 window.screen.availWidth\n网页滚动距离顶部距离 document.body.scrollTop\n网页滚动距离左边距离 document.body.scrollLeft\n\n网页可见区域宽： document.body.clientWidth\n网页可见区域高： document.body.clientHeight\n网页可见区域宽： document.body.offsetWidth (包括边线的宽)\n网页可见区域高： document.body.offsetHeight (包括边线的高)\n网页正文全文宽： document.body.scrollWidth\n网页正文全文高： document.body.scrollHeight\n网页被卷去的高： document.body.scrollTop\n网页被卷去的左： document.body.scrollLeft\n\n对应的dom元素的宽高有以下几个常用的：\n元素的实际高度：document.getElementById("div").offsetHeight\n元素的实际宽度：document.getElementById("div").offsetWidth\n元素的实际距离左边界的距离：document.getElementById("div").offsetLeft\n元素的实际距离上边界的距离：document.getElementById("div").offsetTop\n\n\nwindow.getComputedStyle(dom元素,\'伪类\').属性名\ndom元素.clientHeight/clientWidth\ndom元素.offsetHeight/offsetWidth\ndom元素.scrollHeight/scrollWidth\ndom元素.style.height/width\n\n\n')])])]),e("h2",{attrs:{id:"dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[t._v("#")]),t._v(" DOM")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('-nodeType\n\n\n Node.ELEMENT_NODE(1);\n Node.ATTRIBUTE_NODE(2);\n Node.TEXT_NODE(3);\n Node.CDATA_SECTION_NODE(4);\n Node.ENTITY_REFERENCE_NODE(5);\n Node.ENTITY_NODE(6);\n Node.PROCESSING_INSTRUCTION_NODE(7);\n Node.COMMENT_NODE(8);\n Node.DOCUMENT_NODE(9);\n Node.DOCUMENT_TYPE_NODE(10);\n Node.DOCUMENT_FRAGMENT_NODE(11);\n Node.NOTATION_NODE(12)。\n\n\n\n-nodeName nodeValue  tagName\n\n对于元素节点，nodeName 中保存的始终都是元素的标签名，而 nodeValue 的值则始终为 null\n\n-childNodes\n\nnodeList[0] 等同于 nodeList.items(0)\n\nparentNode\n\nnextSibling previousSibling\n\nfirstChild lastChild\n\n所有节点都有的最后一个属性是 ownerDocument，该属性指向表示整个文档的文档节点\n\n\n下面四个方法操作的都是某个节点的子节点\n\nappendChild()\n返回新增的节点\n\ninsertBefore()方法。接受两个参数:要插入的节点和作为参照的节点,\n插入节点后，被插入的节点会变成参照节点的前一个同胞节点(previousSibling)，同时被方法返回。\n如果参照节点是 null，则 insertBefore()与 appendChild()执行相同的操作\n\nreplaceChild()方法接受的两个参数是: 要插入的节点和要替换的节点。\n要替换的节点将由这个方法返回并从文档树中被移除，同时由要插入的节点占据其位置\n在使用 replaceChild()插入一个节点时，该节点的所有关系指针都会从被它替换的节点复制过来。\n尽管从技术上讲，被替换的节点仍然还在文档中，但它在文档中已经没有了自己的位置。\n\nremoveChild()方法。这个方法接受一个参数，即要移除 的节点。被移除的节点将成为方法的返回值\n与使用 replaceChild()方法一样，通过 removeChild()移除的节点仍然为文档所有，\n只不过在文档中已经没有了自己的位置\n\n\n\n\ndocument.documentElement; //取得对<html>的引用\ndocument.body // 取得对body的引用\ndocument.doctype // 取得对<!DOCTYPE>引用\ndocument.title // 标题\n//取得完整的 URL\nvar url = document.URL;\nvar domain = document.domain;   // 可以设置, 但只能设置为主域\n//取得来源页面的 URL\nvar referrer = document.referrer;\n\n\n⭐️\n当页面中包含来自其他子域的框架或内嵌框架时，能够设置document.domain就非常方便了。\n由于跨域安全限制，来自不同子域的页面无法通过 JavaScript 通信。\n而通过将每个页面的 document.domain 设置为相同的值，这些页面就可以互相访问对方包含的 JavaScript 对象了。\n例如，假设有一个页面加载自 www.wrox.com，其中包含一个内嵌框架，框架内的页面加载自 p2p.wrox.com。\n由于 document.domain 字符串不一样，内外两个页面之间无法相互访问对方的 JavaScript 对象。\n但如果将这两个页面的 document.domain 值都设置为"wrox.com"，它们之间就可以通信了\n浏览器对 domain 属性还有一个限制，即如果域名一开始是“松散的”(loose)，那么不能将它再设置为“紧绷的”(tight)。\n换句话说，在将 document.domain 设置为"wrox.com"之后，就不能再将其 设置回"p2p.wrox.com"，否则将会导致错误\n\n\n除了属性和方法，document 对象还有一些特殊的集合。这些集合都是 HTMLCollection 对象，\n为访问文档常用的部分提供了快捷方式，包括:\n document.anchors，包含文档中所有带 name 特性的<a>元素;\n document.applets，包含文档中所有的<applet>元素，因为不再推荐使用<applet>元素，\n所以这个集合已经不建议使用了;\n document.forms，包含文档中所有的<form>元素，与 document.getElementsByTagName("form")\n得到的结果相同;\ndocument.images，包含文档中所有的<img>元素，与 document.getElementsByTagName\n("img")得到的结果相同;\n document.links，包含文档中所有带 href 特性的<a>元素。\n\n\ndom 一致性检测\ndocument.implementation.hasFeature("XML", "1.0")\n\n文档写入\n体现在下列 4 个方法中:write()、writeln()、open()和 close()\n\n\nHTML\n\n每个 HTML 元素中都存在的下列标准特性。\n id，元素在文档中的唯一标识符。\n title，有关元素的附加说明信息，一般通过工具提示条显示出来。\n lang，元素内容的语言代码，很少使用。\n dir，语言的方向，值为"ltr"(left-to-right，从左至右)或"rtl"(right-to-left，从右至左)，\n也很少使用。\n className，与元素的 class 特性对应，即为元素指定的 CSS 类。没有将这个属性命名为 class，\n是因为 class 是 ECMAScript 的保留字\n\n操作特性的 DOM 方法主要有三个，分别是 getAttribute()、setAttribute()和 removeAttribute()。\n这三 个方法可以针对任何特性使用，包括那些以 HTMLElement 类型属性的形式定义的特性\n\nattributes 属性\n\n要取得元素的 id 特性，可以使用以下代码。\n    var id = element.attributes.getNamedItem("id").nodeValue;\n  以下是使用方括号语法通过特性名称访问节点的简写方式。\n    var id = element.attributes["id"].nodeValue;\n\n调用 removeNamedItem()方法与在元素上调用 removeAttribute()方法的效果相同——直接删 除具有给定名称的特性。\n下面的例子展示了两个方法间唯一的区别，即 removeNamedItem()返回表示 被删除特性的 Attr 节点。\nvar oldAttr = element.attributes.removeNamedItem("id");\n\ndocument.createElement()方法可以创建新元素\ndocument.createTextNode()创建新文本节点\n\nText类型提供了一个作用与normalize()相反的方法:splitText(num)\n\nComment 类型与 Text 类型继承自相同的基类，因此它拥有除 splitText()之外的所有字符串操\n 作方法\n\n document.createComment()并为其传递注释文本也可以创建注释节点\n\nCDATASection 类型继承自 Text 类型，因此拥有除 splitText()之外的所有字符串操作方法\nCDATA 区域只会出现在 XML 文档中\n\n\n\n轻量级文档\ndocument.createDocumentFragment()\n⭐️⭐️⭐️⭐️⭐️\n如果将文档中的节 点添加到文档片段中，就会从文档树中移除该节点，也不会从浏览器中再看到该节点。\n添加到文档片段 中的新节点同样也不属于文档树。\n可以通过 appendChild()或 insertBefore()将文档片段中内容添 加到文档中。\n在将文档片段作为参数传递给这两个方法时，实际上只会将文档片段的所有子节点添加到 相应位置上;\n文档片段本身永远不会成为文档树的一部分\n\n\nAttr 类型\nvar attr = document.createAttribute("align");\nattr.value = "left";\nelement.setAttributeNode(attr);\nalert(element.attributes["align"].value);       //"left"\nalert(element.getAttributeNode("align").value); //"left"\nalert(element.getAttribute("align"));        //"left"\n\n\n\n为<table>元素添加的属性和方法如下。\n caption:保存着对<caption>元素(如果有)的指针。\n tBodies:是一个<tbody>元素的 HTMLCollection。\n tFoot:保存着对<tfoot>元素(如果有)的指针。\n tHead:保存着对<thead>元素(如果有)的指针。\n rows:是一个表格中所有行的 HTMLCollection。\n createTHead():创建<thead>元素，将其放到表格中，返回引用。\n createTFoot():创建<tfoot>元素，将其放到表格中，返回引用。\n createCaption():创建<caption>元素，将其放到表格中，返回引用。  deleteTHead():删除<thead>元素。\n deleteTFoot():删除<tfoot>元素。\n deleteCaption():删除<caption>元素。\n deleteRow(pos):删除指定位置的行。\n insertRow(pos):向 rows 集合中的指定位置插入一行。\n为<tbody>元素添加的属性和方法如下。\n rows:保存着<tbody>元素中行的 HTMLCollection。\n deleteRow(pos):删除指定位置的行。\n insertRow(pos):向 rows 集合中的指定位置插入一行，返回对新插入行的引用\n\n\n为<tr>元素添加的属性和方法如下。\n cells:保存着<tr>元素中单元格的 HTMLCollection。\n deleteCell(pos):删除指定位置的单元格。\n insertCell(pos):向 cells 集合中的指定位置插入一个单元格，返回对新插入单元格的引用。\n\n')])])]),e("h2",{attrs:{id:"bom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bom"}},[t._v("#")]),t._v(" Bom")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("窗口位置\nwindow.screenLeft window.screenTop\n\n窗口大小\ninnerWidth、innerHeight、outerWidth 和 outerHeight\n\n通过dom提供页面可见区域相关信息\ndocument.documentElement.clientWidth 和\ndocument.documentElement.clientHeight 中保存了页面视口的信息\n\ndocument.body.clientWidth 和 document.body. clientHeight\n\n")])])]),e("h2",{attrs:{id:"form"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#form"}},[t._v("#")]),t._v(" form")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('HTMLFormElement 也有它自己下列独有的属性和方法。\n acceptCharset:服务器能够处理的字符集;等价于 HTML 中的 accept-charset 特性。  action:接受请求的 URL;等价于 HTML 中的 action 特性。\n elements:表单中所有控件的集合(HTMLCollection)。\n enctype:请求的编码类型;等价于 HTML 中的 enctype 特性。\n length:表单中控件的数量。\n method:要发送的 HTTP 请求类型，通常是"get"或"post";等价于 HTML 的 method 特性。  name:表单的名称;等价于 HTML 的 name 特性。\n reset():将所有表单域重置为默认值。\n submit():提交表单。\n target:用于发送请求和接收响应的窗口名称;等价于 HTML 的 target 特性。\n\nvar firstForm = document.forms[0]; //取得页面中的第一个表单\nvar myForm = document.forms["form2"]; //取得页面中名称为"form2"的表单\n\n调用 submit()方法的形式提交表单时，不会触发 submit 事件，因此要记得在调用此方法之 前先验证表单数据\n与调用 submit()方法不同，调用 reset()方法会像单击重置按钮一样触发 reset 事件。\n\n共有的表单字段属性\n\n除了<fieldset>元素之外，所有表单字段都拥有相同的一组属性。由于<input>类型可以表示多 种表单字段，因此有些属性只适用于某些字段，但还有一些属性是所有字段所共有的。表单字段共有的 属性如下。\n disabled:布尔值，表示当前字段是否被禁用。\n form:指向当前字段所属表单的指针;只读。\n name:当前字段的名称。\n readOnly:布尔值，表示当前字段是否只读。\n tabIndex:表示当前字段的切换(tab)序号。\n type:当前字段的类型，如"checkbox"、"radio"，等等。\n value:当前字段将被提交给服务器的值。对文件字段来说，这个属性是只读的，包含着文件\n在计算机中的路径。\n\n每个表单字段都有两个方法:focus()和 blur()\n\n共有的表单字段事件\n除了支持鼠标、键盘、更改和 HTML 事件之外，所有表单字段都支持下列 3 个事件。\n blur:当前字段失去焦点时触发。 change:对于<input>和<textarea>元素，在它们失去焦点且 value 值改变时触发;对于\n<select>元素，在其选项改变时触发。  focus:当前字段获得焦点时触发。\n\n\n\ninput type="text" 和 textarea 区别\n\n必须将<input>元素的 type 特性设置为"text"。而通过设置 size 特性，可以指 定文本框中能够显示的字符数。\n通过 value 特性，可以设置文本框的初始值，而 maxlength 特性则用 于指定文本框可以接受的最大字符数。\n如果要创建一个文本框，让它能够显示 25 个字符，但输入不能 超过 50 个字符，可以使用以下代码:\n 图灵社区会员 StinkBC(StinkBC@gmail.com) 专享 尊重版权\n\n<input type="text" size="25" maxlength="50" value="initial value">\n\n\n<textarea>元素则始终会呈现为一个多行文本框。要指定文本框的大小，可以使用 rows 和 cols 特性。其中，rows 特性指定的是文本框的字符行数，而 cols 特性指定的是文本框的字符列数 (类似于<inpu>元素的 size 特性)。与<input>元素不同，<textarea>的初始值必须要放在\n<textarea>和</textarea>之间，如下面的例子所示。 <textarea rows="25" cols="5">initial value</textarea>\n另一个与<input>的区别在于，不能在 HTML 中给<textarea>指定最大字符数。\n无论这两种文本框在标记中有什么区别，但它们都会将用户输入的内容保存在 value 属性中。可 以通过这个属性读取和设置文本框的值，如下面的例子所示:\n     var textbox = document.forms[0].elements["textbox1"];\n     alert(textbox.value);\n     textbox.value = "Some new value";\n我们建议读者像上面这样使用 value 属性读取或设置文本框的值，不建议使用标准的 DOM 方法。 换句话说，不要使用 setAttribute()设置<input>元素的 value 特性，也不要去修改<textarea> 元素的第一个子节点。原因很简单:对 value 属性所作的修改，不一定会反映在 DOM 中。因此，在处 理文本框的值时，最好不要使用 DOM 方法。\n\n\n上述两种文本框都支持 select()方法，这个方法用于选择文本框中的所有文本。在调用 select() 方法时，大多数浏览器(Opera 除外)都会将焦点设置到文本框中。\n\nselectionStart 和 selectionEnd\n\n现在除 select()方法之外，所有文本框都有一个 setSelectionRange() 方法。\n这个方法接收两个参数:要选择的第一个字符的索引和要选择的最后一个字符之后的字符的索引\n\ntextbox.value = "Hello world!"\n//选择所有文本\ntextbox.setSelectionRange(0, textbox.value.length); //"Hello world!"\n//选择前 3 个字符 textbox.setSelectionRange(0, 3); //"Hel"\n//选择第4到第6个字符 textbox.setSelectionRange(4, 7); //"o w"\n\n\n\n可以通过下列代码屏蔽所有按键操作。\n EventUtil.addHandler(textbox, "keypress", function(event){\n    event = EventUtil.getEvent(event);\n    EventUtil.preventDefault(event);\n});\n\n例如，下列代码只允许 用户输入数值。\nEventUtil.addHandler(textbox, "keypress", function(event){\nevent = EventUtil.getEvent(event);\nvar target = EventUtil.getTarget(event);\nvar charCode = EventUtil.getCharCode(event);\n\n        if (!/\\d/.test(String.fromCharCode(charCode)) && charCode > 9 &&\n                 !event.ctrlKey){\n  \t\t\tEventUtil.preventDefault(event);\n\t}\n});\n\n\n下列就是 6 个剪贴板事件。\n beforecopy:在发生复制操作前触发。\n copy:在发生复制操作时触发。\n beforecut:在发生剪切操作前触发。\n cut:在发生剪切操作时触发。\n beforepaste:在发生粘贴操作前触发。\n paste:在发生粘贴操作时触发\n\n\n\n选择框的 change 事件与其他表单字段的 change 事件触发的 条件不一样。\n其他表单字段的 change 事件是在值被修改且焦点离开当前字段时触发，\n而选择框的 change 事件只要选中了选项就会触发\n\n\n移除 option\nselectbox.removeChild(selectbox.options[0]); //移除第一个选项\n其次，可以使用选择框的 remove()方法。\n这个方法接受一个参数，即要移除选项的索引，如下面的例子所示:\nselectbox.remove(0); //移除第一个选项\n最后一种方式，就是将相应选项设置为 null。这种方式也是 DOM 出现之前浏览器的遗留机制。\n 例如:\nselectbox.options[0] = null; //移除第一个选项\n  要清除选择框中所有的项，需要迭代所有选项并逐个移除它们，如下面的例子所示:\n    function clearSelectbox(selectbox){\n        for(var i=0, len=selectbox.options.length; i < len; i++){\n            selectbox.remove(i);\n        }\n}\n\n富文本编辑\n\n1\n<iframe name="richedit" style="height:100px;width:100px;" src="blank.htm"></iframe>\n    <script type="text/javascript">\n    EventUtil.addHandler(window, "load", function(){\n        frames["richedit"].document.designMode = "on";\n    });\n<\/script>\n\n2.\n<div class="editable" id="richedit" contenteditable></div>\n与富文本编辑器交互的主要方式，就是使用 document.execCommand()。\n这个方法可以对文档执 行预定义的命令，而且可以应用大多数格式。\n可以为 document.execCommand()方法\n传递 3 个参数: 要执行的命令名称、表示浏览器是否应该为当前命令提供用户界面的一个布尔值\n和执行命令必须的一个 值(如果不需要值，则传递 null)。\n\n\n\n')])])]),e("h2",{attrs:{id:"javascript笔试部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript笔试部分"}},[t._v("#")]),t._v(" JavaScript笔试部分:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nhttps://juejin.im/post/5d51e16d6fb9a06ae17d6bbc\nhttps://juejin.im/post/5cef46226fb9a07eaf2b7516\nhttps://juejin.im/post/5d469e0851882544b85c32ef\nhttps://juejin.im/post/5d46a94e6fb9a06b24430027\n\n\nMithril、Inferno、Angular、React、Aurelia、Vue 和 Polymer\n我发现最简单的方法是从你选择的库中选择一个方法，并记录当你调用它时会发生什么。不要每一个步骤都记录，而是尝试理解它的整体流程和结构。\n\n\n")])])]),e("h2",{attrs:{id:"document-execcommand"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#document-execcommand"}},[t._v("#")]),t._v(" document.execCommand")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("命令")]),t._v(" "),e("th",[t._v("解释")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("backColor")]),t._v(" "),e("td",[t._v("修改文档的背景颜色。需要一个 类型的字符串值作为参数传入。")]),t._v(" "),e("td",[t._v("#ff0000")])]),t._v(" "),e("tr",[e("td",[t._v("bold")]),t._v(" "),e("td",[t._v("开启或关闭选中文字或插入点的粗体字效果。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("copy")]),t._v(" "),e("td",[t._v("拷贝当前选中内容到剪贴板。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("createLink")]),t._v(" "),e("td",[t._v("将选中内容创建为一个锚链接。")]),t._v(" "),e("td",[e("a",{attrs:{href:"https://link.juejin.cn/?target=http%3A%2F%2Fwww.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("www.baidu.com"),e("OutboundLink")],1)])]),t._v(" "),e("tr",[e("td",[t._v("cut")]),t._v(" "),e("td",[t._v("剪贴当前选中的文字并复制到剪贴板。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("delete")]),t._v(" "),e("td",[t._v("删除选中部分.")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("fontName")]),t._v(" "),e("td",[t._v("在插入点或者选中文字部分修改字体名称.")]),t._v(" "),e("td",[t._v("Arial")])]),t._v(" "),e("tr",[e("td",[t._v("fontSize")]),t._v(" "),e("td",[t._v("在插入点或者选中文字部分修改字体大小. 需要提供一个HTML字体尺寸 (1-7) 作为参数。")]),t._v(" "),e("td",[t._v("6")])]),t._v(" "),e("tr",[e("td",[t._v("foreColor")]),t._v(" "),e("td",[t._v("在插入点或者选中文字部分修改字体颜色. 需要提供一个颜色值字符串作为参数。")]),t._v(" "),e("td",[t._v("#ff0000")])]),t._v(" "),e("tr",[e("td",[t._v("formatBlock")]),t._v(" "),e("td",[t._v("添加一个HTML块式标签在包含当前选择的行")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("forwardDelete")]),t._v(" "),e("td",[t._v("删除光标所在位置的字符。 和按下删除键一样。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("heading")]),t._v(" "),e("td",[t._v("添加一个标题标签在光标处或者所选文字上。")]),t._v(" "),e("td",[t._v("H6")])]),t._v(" "),e("tr",[e("td",[t._v("hiliteColor")]),t._v(" "),e("td",[t._v("更改选择或插入点的背景颜色。")]),t._v(" "),e("td",[t._v("#dddddd")])]),t._v(" "),e("tr",[e("td",[t._v("indent")]),t._v(" "),e("td",[t._v("缩进选择或插入点所在的行")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("insertHorizontalRule")]),t._v(" "),e("td",[t._v("在插入点插入一个水平线")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("insertHTML")]),t._v(" "),e("td",[t._v("在插入点插入一个HTML字符串")]),t._v(" "),e("td",[t._v("< p>I Am A P< /p>")])]),t._v(" "),e("tr",[e("td",[t._v("insertImage")]),t._v(" "),e("td",[t._v("在插入点插入一张图片")]),t._v(" "),e("td",[t._v("图片链接")])]),t._v(" "),e("tr",[e("td",[t._v("insertOrderedList")]),t._v(" "),e("td",[t._v("创建一个有序列表")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("insertUnorderedList")]),t._v(" "),e("td",[t._v("创建一个无序列表")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("insertParagraph")]),t._v(" "),e("td",[t._v("在选择或当前行周围插入一个段落")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("insertText")]),t._v(" "),e("td",[t._v("在光标插入位置插入文本内容或者覆盖所选的文本内容。")]),t._v(" "),e("td",[t._v("插入内容")])]),t._v(" "),e("tr",[e("td",[t._v("italic")]),t._v(" "),e("td",[t._v("在光标插入点开启或关闭斜体字。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("justifyCenter")]),t._v(" "),e("td",[t._v("对光标插入位置或者所选内容进行文字居中。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("justifyFull")]),t._v(" "),e("td",[t._v("对光标插入位置或者所选内容进行文本对齐。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("justifyLeft")]),t._v(" "),e("td",[t._v("对光标插入位置或者所选内容进行左对齐。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("justifyRight")]),t._v(" "),e("td",[t._v("对光标插入位置或者所选内容进行右对齐。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("outdent")]),t._v(" "),e("td",[t._v("对光标插入行或者所选行内容减少缩进量。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("paste")]),t._v(" "),e("td",[t._v("在光标位置粘贴剪贴板的内容。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("redo")]),t._v(" "),e("td",[t._v("重做被撤销的操作。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("removeFormat")]),t._v(" "),e("td",[t._v("对所选内容去除所有格式")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("selectAll")]),t._v(" "),e("td",[t._v("选中编辑区里的全部内容。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("strikeThrough")]),t._v(" "),e("td",[t._v("在光标插入点开启或关闭删除线。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("subscript")]),t._v(" "),e("td",[t._v("在光标插入点开启或关闭下角标。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("superscript")]),t._v(" "),e("td",[t._v("在光标插入点开启或关闭上角标。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("underline")]),t._v(" "),e("td",[t._v("在光标插入点开启或关闭下划线。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("undo")]),t._v(" "),e("td",[t._v("撤销最近执行的命令。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("unlink")]),t._v(" "),e("td",[t._v("去除所选的锚链接的"),e("a",{attrs:{href:"https://link.juejin.cn/?target=",target:"_blank",rel:"noopener noreferrer"}},[t._v("标签"),e("OutboundLink")],1)]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("contentReadOnly")]),t._v(" "),e("td",[t._v("通过传入一个布尔类型的参数来使能文档内容的可编辑性。(IE浏览器不支持)")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("decreaseFontSize")]),t._v(" "),e("td",[t._v("给选中文字加上 < small > 标签，或在选中点插入该标签。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("defaultParagraphSeparator")]),t._v(" "),e("td",[t._v("更改在可编辑文本区域中创建新段落时使用的段落分隔符。")]),t._v(" "),e("td",[e("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FGuide%2FHTML%2FContent_Editable%23Differences_in_markup_generation",target:"_blank",rel:"noopener noreferrer"}},[t._v("标记生成的差异"),e("OutboundLink")],1)])]),t._v(" "),e("tr",[e("td",[t._v("enableInlineTableEditing")]),t._v(" "),e("td",[t._v("启用或禁用表格行和列插入和删除控件。")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("enableObjectResizing")]),t._v(" "),e("td",[t._v("启用或禁用图像和其他对象的大小可调整")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("increaseFontSize")]),t._v(" "),e("td",[t._v("在选择或插入点周围添加一个BIG标签。")]),t._v(" "),e("td",[t._v("null")])])])]),t._v(" "),e("h2",{attrs:{id:"在线工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在线工具"}},[t._v("#")]),t._v(" 在线工具")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://stackblitz.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://stackblitz.com/"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://codepen.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codepen.io/"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://codesandbox.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io"),e("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=s.exports}}]);